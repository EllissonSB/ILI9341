
DISPLAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000355c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00070a74  080036e4  080036e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08074158  08074158  0007606c  2**0
                  CONTENTS
  4 .ARM          00000008  08074158  08074158  00075158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08074160  08074160  0007606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08074160  08074160  00075160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08074164  08074164  00075164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08074168  00076000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0007606c  2**0
                  CONTENTS
 10 .bss          000001d8  2000006c  2000006c  0007606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000244  20000244  0007606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0007606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008710  00000000  00000000  0007609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cad  00000000  00000000  0007e7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00080460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068e  00000000  00000000  00080d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021893  00000000  00000000  000813ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a80c  00000000  00000000  000a2c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4daf  00000000  00000000  000ad46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017221c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028e0  00000000  00000000  00172260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00174b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036cc 	.word	0x080036cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080036cc 	.word	0x080036cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <ILI9341_SPI_init>:

#include "ILI9341.h"
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void ILI9341_SPI_init(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c2:	4802      	ldr	r0, [pc, #8]	@ (80004cc <ILI9341_SPI_init+0x14>)
 80004c4:	f001 fd44 	bl	8001f50 <HAL_GPIO_WritePin>

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <ILI9341_SPI_SEND>:
void ILI9341_SPI_SEND(unsigned char SPI_Data){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &SPI_Data, 1, 1);
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	2301      	movs	r3, #1
 80004de:	2201      	movs	r2, #1
 80004e0:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <ILI9341_SPI_SEND+0x20>)
 80004e2:	f002 fa26 	bl	8002932 <HAL_SPI_Transmit>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000098 	.word	0x20000098

080004f4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000504:	480b      	ldr	r0, [pc, #44]	@ (8000534 <ILI9341_Write_Command+0x40>)
 8000506:	f001 fd23 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <ILI9341_Write_Command+0x40>)
 8000512:	f001 fd1d 	bl	8001f50 <HAL_GPIO_WritePin>
	ILI9341_SPI_SEND(Command);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffd9 	bl	80004d0 <ILI9341_SPI_SEND>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <ILI9341_Write_Command+0x40>)
 8000526:	f001 fd13 	bl	8001f50 <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020c00 	.word	0x40020c00

08000538 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000548:	480b      	ldr	r0, [pc, #44]	@ (8000578 <ILI9341_Write_Data+0x40>)
 800054a:	f001 fd01 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000554:	4808      	ldr	r0, [pc, #32]	@ (8000578 <ILI9341_Write_Data+0x40>)
 8000556:	f001 fcfb 	bl	8001f50 <HAL_GPIO_WritePin>
	ILI9341_SPI_SEND(Data);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffb7 	bl	80004d0 <ILI9341_SPI_SEND>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000568:	4803      	ldr	r0, [pc, #12]	@ (8000578 <ILI9341_Write_Data+0x40>)
 800056a:	f001 fcf1 	bl	8001f50 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40020c00 	.word	0x40020c00

0800057c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
	{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4604      	mov	r4, r0
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4623      	mov	r3, r4
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	4603      	mov	r3, r0
 8000590:	80bb      	strh	r3, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	807b      	strh	r3, [r7, #2]
 8000596:	4613      	mov	r3, r2
 8000598:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 800059a:	202a      	movs	r0, #42	@ 0x2a
 800059c:	f7ff ffaa 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffc5 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ffc0 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	0a1b      	lsrs	r3, r3, #8
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ffb9 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffb4 	bl	8000538 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 80005d0:	202b      	movs	r0, #43	@ 0x2b
 80005d2:	f7ff ff8f 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffaa 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 80005e4:	88bb      	ldrh	r3, [r7, #4]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffa5 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 80005ee:	883b      	ldrh	r3, [r7, #0]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff9e 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 80005fc:	883b      	ldrh	r3, [r7, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff99 	bl	8000538 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8000606:	202c      	movs	r0, #44	@ 0x2c
 8000608:	f7ff ff74 	bl	80004f4 <ILI9341_Write_Command>
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <ILI9341_Reset>:
/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <ILI9341_Reset+0x38>)
 8000620:	f001 fc96 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000624:	20c8      	movs	r0, #200	@ 0xc8
 8000626:	f001 f9ed 	bl	8001a04 <HAL_Delay>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <ILI9341_Reset+0x38>)
 8000632:	f001 fc8d 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000636:	20c8      	movs	r0, #200	@ 0xc8
 8000638:	f001 f9e4 	bl	8001a04 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000642:	4802      	ldr	r0, [pc, #8]	@ (800064c <ILI9341_Reset+0x38>)
 8000644:	f001 fc84 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40020c00 	.word	0x40020c00

08000650 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	73fb      	strb	r3, [r7, #15]
	ILI9341_Write_Command(0x36);
 800065e:	2036      	movs	r0, #54	@ 0x36
 8000660:	f7ff ff48 	bl	80004f4 <ILI9341_Write_Command>
	HAL_Delay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f001 f9cd 	bl	8001a04 <HAL_Delay>

	switch(screen_rotation)
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d837      	bhi.n	80006e0 <ILI9341_Set_Rotation+0x90>
 8000670:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <ILI9341_Set_Rotation+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000689 	.word	0x08000689
 800067c:	0800069f 	.word	0x0800069f
 8000680:	080006b5 	.word	0x080006b5
 8000684:	080006cb 	.word	0x080006cb
		{
			case SCREEN_VERTICAL_1:
				ILI9341_Write_Data(0x40|0x08);
 8000688:	2048      	movs	r0, #72	@ 0x48
 800068a:	f7ff ff55 	bl	8000538 <ILI9341_Write_Data>
				LCD_WIDTH = 240;
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <ILI9341_Set_Rotation+0x9c>)
 8000690:	22f0      	movs	r2, #240	@ 0xf0
 8000692:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 320;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <ILI9341_Set_Rotation+0xa0>)
 8000696:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800069a:	801a      	strh	r2, [r3, #0]
				break;
 800069c:	e021      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
			case SCREEN_HORIZONTAL_1:
				ILI9341_Write_Data(0x20|0x08);
 800069e:	2028      	movs	r0, #40	@ 0x28
 80006a0:	f7ff ff4a 	bl	8000538 <ILI9341_Write_Data>
				LCD_WIDTH  = 320;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <ILI9341_Set_Rotation+0x9c>)
 80006a6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006aa:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 240;
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <ILI9341_Set_Rotation+0xa0>)
 80006ae:	22f0      	movs	r2, #240	@ 0xf0
 80006b0:	801a      	strh	r2, [r3, #0]
				break;
 80006b2:	e016      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
			case SCREEN_VERTICAL_2:
				ILI9341_Write_Data(0x80|0x08);
 80006b4:	2088      	movs	r0, #136	@ 0x88
 80006b6:	f7ff ff3f 	bl	8000538 <ILI9341_Write_Data>
				LCD_WIDTH  = 240;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <ILI9341_Set_Rotation+0x9c>)
 80006bc:	22f0      	movs	r2, #240	@ 0xf0
 80006be:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 320;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <ILI9341_Set_Rotation+0xa0>)
 80006c2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006c6:	801a      	strh	r2, [r3, #0]
				break;
 80006c8:	e00b      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
			case SCREEN_HORIZONTAL_2:
				ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80006ca:	20e8      	movs	r0, #232	@ 0xe8
 80006cc:	f7ff ff34 	bl	8000538 <ILI9341_Write_Data>
				LCD_WIDTH  = 320;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <ILI9341_Set_Rotation+0x9c>)
 80006d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006d6:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 240;
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <ILI9341_Set_Rotation+0xa0>)
 80006da:	22f0      	movs	r2, #240	@ 0xf0
 80006dc:	801a      	strh	r2, [r3, #0]
				break;
 80006de:	e000      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
			default:
				//EXIT IF SCREEN ROTATION NOT VALID!
				break;
 80006e0:	bf00      	nop
		}
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000002 	.word	0x20000002
 80006f0:	20000000 	.word	0x20000000

080006f4 <ILI9341_Enable>:
/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006fe:	4802      	ldr	r0, [pc, #8]	@ (8000708 <ILI9341_Enable+0x14>)
 8000700:	f001 fc26 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000710:	f7ff fff0 	bl	80006f4 <ILI9341_Enable>
	ILI9341_SPI_init();
 8000714:	f7ff fed0 	bl	80004b8 <ILI9341_SPI_init>

	ILI9341_Reset();
 8000718:	f7ff ff7c 	bl	8000614 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fee9 	bl	80004f4 <ILI9341_Write_Command>
	HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000726:	f001 f96d 	bl	8001a04 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800072a:	20cb      	movs	r0, #203	@ 0xcb
 800072c:	f7ff fee2 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8000730:	2039      	movs	r0, #57	@ 0x39
 8000732:	f7ff ff01 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8000736:	202c      	movs	r0, #44	@ 0x2c
 8000738:	f7ff fefe 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fefb 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8000742:	2034      	movs	r0, #52	@ 0x34
 8000744:	f7ff fef8 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff fef5 	bl	8000538 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 800074e:	20cf      	movs	r0, #207	@ 0xcf
 8000750:	f7ff fed0 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff feef 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800075a:	20c1      	movs	r0, #193	@ 0xc1
 800075c:	f7ff feec 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8000760:	2030      	movs	r0, #48	@ 0x30
 8000762:	f7ff fee9 	bl	8000538 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8000766:	20e8      	movs	r0, #232	@ 0xe8
 8000768:	f7ff fec4 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 800076c:	2085      	movs	r0, #133	@ 0x85
 800076e:	f7ff fee3 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fee0 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8000778:	2078      	movs	r0, #120	@ 0x78
 800077a:	f7ff fedd 	bl	8000538 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800077e:	20ea      	movs	r0, #234	@ 0xea
 8000780:	f7ff feb8 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fed7 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff fed4 	bl	8000538 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8000790:	20ed      	movs	r0, #237	@ 0xed
 8000792:	f7ff feaf 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8000796:	2064      	movs	r0, #100	@ 0x64
 8000798:	f7ff fece 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800079c:	2003      	movs	r0, #3
 800079e:	f7ff fecb 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 80007a2:	2012      	movs	r0, #18
 80007a4:	f7ff fec8 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 80007a8:	2081      	movs	r0, #129	@ 0x81
 80007aa:	f7ff fec5 	bl	8000538 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 80007ae:	20f7      	movs	r0, #247	@ 0xf7
 80007b0:	f7ff fea0 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80007b4:	2020      	movs	r0, #32
 80007b6:	f7ff febf 	bl	8000538 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80007ba:	20c0      	movs	r0, #192	@ 0xc0
 80007bc:	f7ff fe9a 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80007c0:	2023      	movs	r0, #35	@ 0x23
 80007c2:	f7ff feb9 	bl	8000538 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80007c6:	20c1      	movs	r0, #193	@ 0xc1
 80007c8:	f7ff fe94 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80007cc:	2010      	movs	r0, #16
 80007ce:	f7ff feb3 	bl	8000538 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80007d2:	20c5      	movs	r0, #197	@ 0xc5
 80007d4:	f7ff fe8e 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80007d8:	203e      	movs	r0, #62	@ 0x3e
 80007da:	f7ff fead 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80007de:	2028      	movs	r0, #40	@ 0x28
 80007e0:	f7ff feaa 	bl	8000538 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80007e4:	20c7      	movs	r0, #199	@ 0xc7
 80007e6:	f7ff fe85 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80007ea:	2086      	movs	r0, #134	@ 0x86
 80007ec:	f7ff fea4 	bl	8000538 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80007f0:	2036      	movs	r0, #54	@ 0x36
 80007f2:	f7ff fe7f 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80007f6:	2048      	movs	r0, #72	@ 0x48
 80007f8:	f7ff fe9e 	bl	8000538 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80007fc:	203a      	movs	r0, #58	@ 0x3a
 80007fe:	f7ff fe79 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8000802:	2055      	movs	r0, #85	@ 0x55
 8000804:	f7ff fe98 	bl	8000538 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8000808:	20b1      	movs	r0, #177	@ 0xb1
 800080a:	f7ff fe73 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fe92 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8000814:	2018      	movs	r0, #24
 8000816:	f7ff fe8f 	bl	8000538 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800081a:	20b6      	movs	r0, #182	@ 0xb6
 800081c:	f7ff fe6a 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8000820:	2008      	movs	r0, #8
 8000822:	f7ff fe89 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8000826:	2082      	movs	r0, #130	@ 0x82
 8000828:	f7ff fe86 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 800082c:	2027      	movs	r0, #39	@ 0x27
 800082e:	f7ff fe83 	bl	8000538 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8000832:	20f2      	movs	r0, #242	@ 0xf2
 8000834:	f7ff fe5e 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fe7d 	bl	8000538 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800083e:	2026      	movs	r0, #38	@ 0x26
 8000840:	f7ff fe58 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff fe77 	bl	8000538 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 800084a:	20e0      	movs	r0, #224	@ 0xe0
 800084c:	f7ff fe52 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8000850:	200f      	movs	r0, #15
 8000852:	f7ff fe71 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000856:	2031      	movs	r0, #49	@ 0x31
 8000858:	f7ff fe6e 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 800085c:	202b      	movs	r0, #43	@ 0x2b
 800085e:	f7ff fe6b 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8000862:	200c      	movs	r0, #12
 8000864:	f7ff fe68 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000868:	200e      	movs	r0, #14
 800086a:	f7ff fe65 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800086e:	2008      	movs	r0, #8
 8000870:	f7ff fe62 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8000874:	204e      	movs	r0, #78	@ 0x4e
 8000876:	f7ff fe5f 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 800087a:	20f1      	movs	r0, #241	@ 0xf1
 800087c:	f7ff fe5c 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8000880:	2037      	movs	r0, #55	@ 0x37
 8000882:	f7ff fe59 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8000886:	2007      	movs	r0, #7
 8000888:	f7ff fe56 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 800088c:	2010      	movs	r0, #16
 800088e:	f7ff fe53 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000892:	2003      	movs	r0, #3
 8000894:	f7ff fe50 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000898:	200e      	movs	r0, #14
 800089a:	f7ff fe4d 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 800089e:	2009      	movs	r0, #9
 80008a0:	f7ff fe4a 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fe47 	bl	8000538 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 80008aa:	20e1      	movs	r0, #225	@ 0xe1
 80008ac:	f7ff fe22 	bl	80004f4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe41 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80008b6:	200e      	movs	r0, #14
 80008b8:	f7ff fe3e 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80008bc:	2014      	movs	r0, #20
 80008be:	f7ff fe3b 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80008c2:	2003      	movs	r0, #3
 80008c4:	f7ff fe38 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80008c8:	2011      	movs	r0, #17
 80008ca:	f7ff fe35 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80008ce:	2007      	movs	r0, #7
 80008d0:	f7ff fe32 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80008d4:	2031      	movs	r0, #49	@ 0x31
 80008d6:	f7ff fe2f 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80008da:	20c1      	movs	r0, #193	@ 0xc1
 80008dc:	f7ff fe2c 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80008e0:	2048      	movs	r0, #72	@ 0x48
 80008e2:	f7ff fe29 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80008e6:	2008      	movs	r0, #8
 80008e8:	f7ff fe26 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80008ec:	200f      	movs	r0, #15
 80008ee:	f7ff fe23 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80008f2:	200c      	movs	r0, #12
 80008f4:	f7ff fe20 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80008f8:	2031      	movs	r0, #49	@ 0x31
 80008fa:	f7ff fe1d 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 80008fe:	2036      	movs	r0, #54	@ 0x36
 8000900:	f7ff fe1a 	bl	8000538 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8000904:	200f      	movs	r0, #15
 8000906:	f7ff fe17 	bl	8000538 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 800090a:	2011      	movs	r0, #17
 800090c:	f7ff fdf2 	bl	80004f4 <ILI9341_Write_Command>
	HAL_Delay(120);
 8000910:	2078      	movs	r0, #120	@ 0x78
 8000912:	f001 f877 	bl	8001a04 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8000916:	2029      	movs	r0, #41	@ 0x29
 8000918:	f7ff fdec 	bl	80004f4 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fe97 	bl	8000650 <ILI9341_Set_Rotation>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <ILI9341_Draw_Colour_Burst>:


//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
	{
 8000928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800092c:	b08d      	sub	sp, #52	@ 0x34
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	6039      	str	r1, [r7, #0]
 8000934:	80fb      	strh	r3, [r7, #6]
 8000936:	466b      	mov	r3, sp
 8000938:	461e      	mov	r6, r3
	//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if((Size*2) < BURST_MAX_SIZE)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000946:	d202      	bcs.n	800094e <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800094c:	e002      	b.n	8000954 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 800094e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800095a:	4840      	ldr	r0, [pc, #256]	@ (8000a5c <ILI9341_Draw_Colour_Burst+0x134>)
 800095c:	f001 faf8 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000966:	483d      	ldr	r0, [pc, #244]	@ (8000a5c <ILI9341_Draw_Colour_Burst+0x134>)
 8000968:	f001 faf2 	bl	8001f50 <HAL_GPIO_WritePin>

	unsigned char chifted = 	Colour>>8;;
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b29b      	uxth	r3, r3
 8000972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	unsigned char burst_buffer[Buffer_Size];
 8000976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000978:	460b      	mov	r3, r1
 800097a:	3b01      	subs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
 800097e:	2300      	movs	r3, #0
 8000980:	4688      	mov	r8, r1
 8000982:	4699      	mov	r9, r3
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000990:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000994:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000998:	2300      	movs	r3, #0
 800099a:	460c      	mov	r4, r1
 800099c:	461d      	mov	r5, r3
 800099e:	f04f 0200 	mov.w	r2, #0
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	00eb      	lsls	r3, r5, #3
 80009a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009ac:	00e2      	lsls	r2, r4, #3
 80009ae:	1dcb      	adds	r3, r1, #7
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	ebad 0d03 	sub.w	sp, sp, r3
 80009b8:	466b      	mov	r3, sp
 80009ba:	3300      	adds	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009c2:	e00e      	b.n	80009e2 <ILI9341_Draw_Colour_Burst+0xba>
		{
			burst_buffer[j] = 	chifted;
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c8:	4413      	add	r3, r2
 80009ca:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80009ce:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = Colour;
 80009d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d2:	3301      	adds	r3, #1
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	b2d1      	uxtb	r1, r2
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80009dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009de:	3302      	adds	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3ec      	bcc.n	80009c4 <ILI9341_Draw_Colour_Burst+0x9c>
		}

	uint32_t Sending_Size = Size*2;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f8:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a04:	fb01 f202 	mul.w	r2, r1, r2
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	if(Sending_in_Block != 0)
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d010      	beq.n	8000a34 <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a16:	e009      	b.n	8000a2c <ILI9341_Draw_Colour_Burst+0x104>
			{
			HAL_SPI_Transmit(&hspi2, (unsigned char *)burst_buffer, Buffer_Size, 10);
 8000a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	69b9      	ldr	r1, [r7, #24]
 8000a20:	480f      	ldr	r0, [pc, #60]	@ (8000a60 <ILI9341_Draw_Colour_Burst+0x138>)
 8000a22:	f001 ff86 	bl	8002932 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a28:	3301      	adds	r3, #1
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3f1      	bcc.n	8000a18 <ILI9341_Draw_Colour_Burst+0xf0>
			}
	}

	//REMAINDER!
	HAL_SPI_Transmit(&hspi2, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	230a      	movs	r3, #10
 8000a3a:	69b9      	ldr	r1, [r7, #24]
 8000a3c:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <ILI9341_Draw_Colour_Burst+0x138>)
 8000a3e:	f001 ff78 	bl	8002932 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <ILI9341_Draw_Colour_Burst+0x134>)
 8000a4a:	f001 fa81 	bl	8001f50 <HAL_GPIO_WritePin>
 8000a4e:	46b5      	mov	sp, r6
}
 8000a50:	bf00      	nop
 8000a52:	3734      	adds	r7, #52	@ 0x34
 8000a54:	46bd      	mov	sp, r7
 8000a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	20000098 	.word	0x20000098

08000a64 <ILI9341_Fill_Screen>:


//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <ILI9341_Fill_Screen+0x44>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <ILI9341_Fill_Screen+0x48>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fd7d 	bl	800057c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <ILI9341_Fill_Screen+0x44>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <ILI9341_Fill_Screen+0x48>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff44 	bl	8000928 <ILI9341_Draw_Colour_Burst>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000002 	.word	0x20000002
 8000aac:	20000000 	.word	0x20000000

08000ab0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	460b      	mov	r3, r1
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000ac2:	4b64      	ldr	r3, [pc, #400]	@ (8000c54 <ILI9341_Draw_Pixel+0x1a4>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	88fa      	ldrh	r2, [r7, #6]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	f080 80be 	bcs.w	8000c4c <ILI9341_Draw_Pixel+0x19c>
 8000ad0:	4b61      	ldr	r3, [pc, #388]	@ (8000c58 <ILI9341_Draw_Pixel+0x1a8>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	88ba      	ldrh	r2, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	f080 80b7 	bcs.w	8000c4c <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae4:	485d      	ldr	r0, [pc, #372]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000ae6:	f001 fa33 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af0:	485a      	ldr	r0, [pc, #360]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000af2:	f001 fa2d 	bl	8001f50 <HAL_GPIO_WritePin>
	ILI9341_SPI_SEND(0x2A);
 8000af6:	202a      	movs	r0, #42	@ 0x2a
 8000af8:	f7ff fcea 	bl	80004d0 <ILI9341_SPI_SEND>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b02:	4856      	ldr	r0, [pc, #344]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b04:	f001 fa24 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b0e:	4853      	ldr	r0, [pc, #332]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b10:	f001 fa1e 	bl	8001f50 <HAL_GPIO_WritePin>

	//XDATA
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b1a:	4850      	ldr	r0, [pc, #320]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b1c:	f001 fa18 	bl	8001f50 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	753b      	strb	r3, [r7, #20]
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	757b      	strb	r3, [r7, #21]
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	3301      	adds	r3, #1
 8000b34:	121b      	asrs	r3, r3, #8
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	75bb      	strb	r3, [r7, #22]
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(&hspi2, Temp_Buffer, 4, 1);
 8000b44:	f107 0114 	add.w	r1, r7, #20
 8000b48:	2301      	movs	r3, #1
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	4844      	ldr	r0, [pc, #272]	@ (8000c60 <ILI9341_Draw_Pixel+0x1b0>)
 8000b4e:	f001 fef0 	bl	8002932 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b58:	4840      	ldr	r0, [pc, #256]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b5a:	f001 f9f9 	bl	8001f50 <HAL_GPIO_WritePin>

	//ADDRESS
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b64:	483d      	ldr	r0, [pc, #244]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b66:	f001 f9f3 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b70:	483a      	ldr	r0, [pc, #232]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b72:	f001 f9ed 	bl	8001f50 <HAL_GPIO_WritePin>
	ILI9341_SPI_SEND(0x2B);
 8000b76:	202b      	movs	r0, #43	@ 0x2b
 8000b78:	f7ff fcaa 	bl	80004d0 <ILI9341_SPI_SEND>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b82:	4836      	ldr	r0, [pc, #216]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b84:	f001 f9e4 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b8e:	4833      	ldr	r0, [pc, #204]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b90:	f001 f9de 	bl	8001f50 <HAL_GPIO_WritePin>

	//YDATA
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b9a:	4830      	ldr	r0, [pc, #192]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000b9c:	f001 f9d8 	bl	8001f50 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000ba0:	88bb      	ldrh	r3, [r7, #4]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	743b      	strb	r3, [r7, #16]
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	747b      	strb	r3, [r7, #17]
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	121b      	asrs	r3, r3, #8
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	74bb      	strb	r3, [r7, #18]
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(&hspi2, Temp_Buffer1, 4, 1);
 8000bc4:	f107 0110 	add.w	r1, r7, #16
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2204      	movs	r2, #4
 8000bcc:	4824      	ldr	r0, [pc, #144]	@ (8000c60 <ILI9341_Draw_Pixel+0x1b0>)
 8000bce:	f001 feb0 	bl	8002932 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd8:	4820      	ldr	r0, [pc, #128]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000bda:	f001 f9b9 	bl	8001f50 <HAL_GPIO_WritePin>

	//ADDRESS
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000be4:	481d      	ldr	r0, [pc, #116]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000be6:	f001 f9b3 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf0:	481a      	ldr	r0, [pc, #104]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000bf2:	f001 f9ad 	bl	8001f50 <HAL_GPIO_WritePin>
	ILI9341_SPI_SEND(0x2C);
 8000bf6:	202c      	movs	r0, #44	@ 0x2c
 8000bf8:	f7ff fc6a 	bl	80004d0 <ILI9341_SPI_SEND>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c02:	4816      	ldr	r0, [pc, #88]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000c04:	f001 f9a4 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0e:	4813      	ldr	r0, [pc, #76]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000c10:	f001 f99e 	bl	8001f50 <HAL_GPIO_WritePin>

	//COLOUR
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c1a:	4810      	ldr	r0, [pc, #64]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000c1c:	f001 f998 	bl	8001f50 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	733b      	strb	r3, [r7, #12]
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, Temp_Buffer2, 2, 1);
 8000c30:	f107 010c 	add.w	r1, r7, #12
 8000c34:	2301      	movs	r3, #1
 8000c36:	2202      	movs	r2, #2
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <ILI9341_Draw_Pixel+0x1b0>)
 8000c3a:	f001 fe7a 	bl	8002932 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <ILI9341_Draw_Pixel+0x1ac>)
 8000c46:	f001 f983 	bl	8001f50 <HAL_GPIO_WritePin>
 8000c4a:	e000      	b.n	8000c4e <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000c4c:	bf00      	nop

}
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000002 	.word	0x20000002
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	20000098 	.word	0x20000098

08000c64 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	4603      	mov	r3, r0
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000c82:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <ILI9341_Draw_Rectangle+0xb0>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	88fa      	ldrh	r2, [r7, #6]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d23d      	bcs.n	8000d0a <ILI9341_Draw_Rectangle+0xa6>
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <ILI9341_Draw_Rectangle+0xb4>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	88ba      	ldrh	r2, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d237      	bcs.n	8000d0a <ILI9341_Draw_Rectangle+0xa6>
	if((X+Width-1)>=LCD_WIDTH)
 8000c9a:	88fa      	ldrh	r2, [r7, #6]
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <ILI9341_Draw_Rectangle+0xb0>)
 8000ca2:	8812      	ldrh	r2, [r2, #0]
 8000ca4:	b292      	uxth	r2, r2
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	dd05      	ble.n	8000cb6 <ILI9341_Draw_Rectangle+0x52>
		{
			Width=LCD_WIDTH-X;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <ILI9341_Draw_Rectangle+0xb0>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	807b      	strh	r3, [r7, #2]
		}
	if((Y+Height-1)>=LCD_HEIGHT)
 8000cb6:	88ba      	ldrh	r2, [r7, #4]
 8000cb8:	883b      	ldrh	r3, [r7, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a16      	ldr	r2, [pc, #88]	@ (8000d18 <ILI9341_Draw_Rectangle+0xb4>)
 8000cbe:	8812      	ldrh	r2, [r2, #0]
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	dd05      	ble.n	8000cd2 <ILI9341_Draw_Rectangle+0x6e>
		{
			Height=LCD_HEIGHT-Y;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <ILI9341_Draw_Rectangle+0xb4>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000cd2:	88fa      	ldrh	r2, [r7, #6]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29c      	uxth	r4, r3
 8000cde:	88ba      	ldrh	r2, [r7, #4]
 8000ce0:	883b      	ldrh	r3, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	88b9      	ldrh	r1, [r7, #4]
 8000cec:	88f8      	ldrh	r0, [r7, #6]
 8000cee:	4622      	mov	r2, r4
 8000cf0:	f7ff fc44 	bl	800057c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000cf4:	883b      	ldrh	r3, [r7, #0]
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	8b3b      	ldrh	r3, [r7, #24]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe10 	bl	8000928 <ILI9341_Draw_Colour_Burst>
 8000d08:	e000      	b.n	8000d0c <ILI9341_Draw_Rectangle+0xa8>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000d0a:	bf00      	nop
}
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000002 	.word	0x20000002
 8000d18:	20000000 	.word	0x20000000

08000d1c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	460b      	mov	r3, r1
 8000d34:	717b      	strb	r3, [r7, #5]
 8000d36:	4613      	mov	r3, r2
 8000d38:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;

		function_char = Character;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	75fb      	strb	r3, [r7, #23]

    if (function_char < ' ') {
 8000d3e:	7dfb      	ldrb	r3, [r7, #23]
 8000d40:	2b1f      	cmp	r3, #31
 8000d42:	d802      	bhi.n	8000d4a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	e002      	b.n	8000d50 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
 8000d4c:	3b20      	subs	r3, #32
 8000d4e:	75fb      	strb	r3, [r7, #23]
		}

		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	753b      	strb	r3, [r7, #20]
 8000d54:	e012      	b.n	8000d7c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000d56:	7dfa      	ldrb	r2, [r7, #23]
 8000d58:	7d38      	ldrb	r0, [r7, #20]
 8000d5a:	7d39      	ldrb	r1, [r7, #20]
 8000d5c:	4c3b      	ldr	r4, [pc, #236]	@ (8000e4c <ILI9341_Draw_Char+0x130>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4423      	add	r3, r4
 8000d68:	4403      	add	r3, r0
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	f101 0318 	add.w	r3, r1, #24
 8000d70:	443b      	add	r3, r7
 8000d72:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000d76:	7d3b      	ldrb	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	753b      	strb	r3, [r7, #20]
 8000d7c:	7d3b      	ldrb	r3, [r7, #20]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d9e9      	bls.n	8000d56 <ILI9341_Draw_Char+0x3a>
		}

    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	b298      	uxth	r0, r3
 8000d86:	797b      	ldrb	r3, [r7, #5]
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	0052      	lsls	r2, r2, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	b29c      	uxth	r4, r3
 8000d9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	4623      	mov	r3, r4
 8000da2:	f7ff ff5f 	bl	8000c64 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	757b      	strb	r3, [r7, #21]
 8000daa:	e047      	b.n	8000e3c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	75bb      	strb	r3, [r7, #22]
 8000db0:	e03e      	b.n	8000e30 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {
 8000db2:	7d7b      	ldrb	r3, [r7, #21]
 8000db4:	3318      	adds	r3, #24
 8000db6:	443b      	add	r3, r7
 8000db8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	7dbb      	ldrb	r3, [r7, #22]
 8000dc0:	fa42 f303 	asr.w	r3, r2, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d02e      	beq.n	8000e2a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000dcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d110      	bne.n	8000df4 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b298      	uxth	r0, r3
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	7dbb      	ldrb	r3, [r7, #22]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	4413      	add	r3, r2
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff fe5f 	bl	8000ab0 <ILI9341_Draw_Pixel>
 8000df2:	e01a      	b.n	8000e2a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	7d7b      	ldrb	r3, [r7, #21]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000dfe:	fb11 f303 	smulbb	r3, r1, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b298      	uxth	r0, r3
 8000e08:	797b      	ldrb	r3, [r7, #5]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7dbb      	ldrb	r3, [r7, #22]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000e12:	fb11 f303 	smulbb	r3, r1, r3
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000e1e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4623      	mov	r3, r4
 8000e26:	f7ff ff1d 	bl	8000c64 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000e2a:	7dbb      	ldrb	r3, [r7, #22]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	75bb      	strb	r3, [r7, #22]
 8000e30:	7dbb      	ldrb	r3, [r7, #22]
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d9bd      	bls.n	8000db2 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000e36:	7d7b      	ldrb	r3, [r7, #21]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	757b      	strb	r3, [r7, #21]
 8000e3c:	7d7b      	ldrb	r3, [r7, #21]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d9b4      	bls.n	8000dac <ILI9341_Draw_Char+0x90>
							}
            }
        }
    }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	08003708 	.word	0x08003708

08000e50 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	4608      	mov	r0, r1
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4603      	mov	r3, r0
 8000e60:	70fb      	strb	r3, [r7, #3]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70bb      	strb	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000e6a:	e017      	b.n	8000e9c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	883c      	ldrh	r4, [r7, #0]
 8000e76:	78ba      	ldrb	r2, [r7, #2]
 8000e78:	78f9      	ldrb	r1, [r7, #3]
 8000e7a:	8bbb      	ldrh	r3, [r7, #28]
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	8b3b      	ldrh	r3, [r7, #24]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	4623      	mov	r3, r4
 8000e84:	f7ff ff4a 	bl	8000d1c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000e88:	8b3b      	ldrh	r3, [r7, #24]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	4413      	add	r3, r2
 8000e9a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e3      	bne.n	8000e6c <ILI9341_Draw_Text+0x1c>
    }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}
	...

08000eb0 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000ebc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8000ec0:	6018      	str	r0, [r3, #0]
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000ec8:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8000ecc:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8000ece:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000ed2:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d15e      	bne.n	8000f9a <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fbb7 	bl	8000650 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000ee2:	23f0      	movs	r3, #240	@ 0xf0
 8000ee4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fb46 	bl	800057c <ILI9341_Set_Address>

		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef6:	48c4      	ldr	r0, [pc, #784]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8000ef8:	f001 f82a 	bl	8001f50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f02:	48c1      	ldr	r0, [pc, #772]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8000f04:	f001 f824 	bl	8001f50 <HAL_GPIO_WritePin>

		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8000f14:	e035      	b.n	8000f82 <ILI9341_Draw_Image+0xd2>
		{
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000f1c:	e019      	b.n	8000f52 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];
 8000f1e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8000f22:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000f26:	4413      	add	r3, r2
 8000f28:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000f2c:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	7819      	ldrb	r1, [r3, #0]
 8000f36:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000f3a:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 8000f3e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000f42:	4413      	add	r3, r2
 8000f44:	460a      	mov	r2, r1
 8000f46:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000f48:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000f52:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000f56:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f5a:	d3e0      	bcc.n	8000f1e <ILI9341_Draw_Image+0x6e>
				}
				HAL_SPI_Transmit(&hspi2, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000f5c:	f107 010c 	add.w	r1, r7, #12
 8000f60:	230a      	movs	r3, #10
 8000f62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f66:	48a9      	ldr	r0, [pc, #676]	@ (800120c <ILI9341_Draw_Image+0x35c>)
 8000f68:	f001 fce3 	bl	8002932 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;
 8000f6c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000f70:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000f74:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000f78:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8000f82:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000f86:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8000f8a:	d9c4      	bls.n	8000f16 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f92:	489d      	ldr	r0, [pc, #628]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8000f94:	f000 ffdc 	bl	8001f50 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;
		}
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
	}
}
 8000f98:	e130      	b.n	80011fc <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8000f9a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000f9e:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d15e      	bne.n	8001066 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f7ff fb51 	bl	8000650 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000fae:	23f0      	movs	r3, #240	@ 0xf0
 8000fb0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fae0 	bl	800057c <ILI9341_Set_Address>
		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fc2:	4891      	ldr	r0, [pc, #580]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8000fc4:	f000 ffc4 	bl	8001f50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fce:	488e      	ldr	r0, [pc, #568]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8000fd0:	f000 ffbe 	bl	8001f50 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000fe8:	e019      	b.n	800101e <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];
 8000fea:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8000fee:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000ff8:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8000ffc:	6812      	ldr	r2, [r2, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	7819      	ldrb	r1, [r3, #0]
 8001002:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001006:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 800100a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800100e:	4413      	add	r3, r2
 8001010:	460a      	mov	r2, r1
 8001012:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001014:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8001018:	3301      	adds	r3, #1
 800101a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800101e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8001022:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001026:	d3e0      	bcc.n	8000fea <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(&hspi2, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001028:	f107 010c 	add.w	r1, r7, #12
 800102c:	230a      	movs	r3, #10
 800102e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001032:	4876      	ldr	r0, [pc, #472]	@ (800120c <ILI9341_Draw_Image+0x35c>)
 8001034:	f001 fc7d 	bl	8002932 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;
 8001038:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800103c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001040:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001044:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001048:	3301      	adds	r3, #1
 800104a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800104e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001052:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8001056:	d9c4      	bls.n	8000fe2 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105e:	486a      	ldr	r0, [pc, #424]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8001060:	f000 ff76 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8001064:	e0ca      	b.n	80011fc <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8001066:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800106a:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d15e      	bne.n	8001132 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff faeb 	bl	8000650 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 800107a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800107e:	22f0      	movs	r2, #240	@ 0xf0
 8001080:	2100      	movs	r1, #0
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fa7a 	bl	800057c <ILI9341_Set_Address>
		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800108e:	485e      	ldr	r0, [pc, #376]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8001090:	f000 ff5e 	bl	8001f50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109a:	485b      	ldr	r0, [pc, #364]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 800109c:	f000 ff58 	bl	8001f50 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80010ac:	e035      	b.n	800111a <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80010b4:	e019      	b.n	80010ea <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];
 80010b6:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80010ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010be:	4413      	add	r3, r2
 80010c0:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80010c4:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	7819      	ldrb	r1, [r3, #0]
 80010ce:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80010d2:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 80010d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80010e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010e4:	3301      	adds	r3, #1
 80010e6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80010ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010f2:	d3e0      	bcc.n	80010b6 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(&hspi2, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80010f4:	f107 010c 	add.w	r1, r7, #12
 80010f8:	230a      	movs	r3, #10
 80010fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010fe:	4843      	ldr	r0, [pc, #268]	@ (800120c <ILI9341_Draw_Image+0x35c>)
 8001100:	f001 fc17 	bl	8002932 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;
 8001104:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001108:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800110c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001110:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001114:	3301      	adds	r3, #1
 8001116:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800111a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800111e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8001122:	d9c4      	bls.n	80010ae <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800112a:	4837      	ldr	r0, [pc, #220]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 800112c:	f000 ff10 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8001130:	e064      	b.n	80011fc <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8001132:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001136:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d15d      	bne.n	80011fc <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fa85 	bl	8000650 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001146:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800114a:	22f0      	movs	r2, #240	@ 0xf0
 800114c:	2100      	movs	r1, #0
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fa14 	bl	800057c <ILI9341_Set_Address>
		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800115a:	482b      	ldr	r0, [pc, #172]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 800115c:	f000 fef8 	bl	8001f50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001166:	4828      	ldr	r0, [pc, #160]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 8001168:	f000 fef2 	bl	8001f50 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8001178:	e035      	b.n	80011e6 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001180:	e019      	b.n	80011b6 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];
 8001182:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001186:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800118a:	4413      	add	r3, r2
 800118c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8001190:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	4413      	add	r3, r2
 8001198:	7819      	ldrb	r1, [r3, #0]
 800119a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800119e:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 80011a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011a6:	4413      	add	r3, r2
 80011a8:	460a      	mov	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80011ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80011b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011be:	d3e0      	bcc.n	8001182 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(&hspi2, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80011c0:	f107 010c 	add.w	r1, r7, #12
 80011c4:	230a      	movs	r3, #10
 80011c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011ca:	4810      	ldr	r0, [pc, #64]	@ (800120c <ILI9341_Draw_Image+0x35c>)
 80011cc:	f001 fbb1 	bl	8002932 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;
 80011d0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80011d4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80011d8:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80011dc:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80011e0:	3301      	adds	r3, #1
 80011e2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80011e6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80011ea:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80011ee:	d9c4      	bls.n	800117a <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f6:	4804      	ldr	r0, [pc, #16]	@ (8001208 <ILI9341_Draw_Image+0x358>)
 80011f8:	f000 feaa 	bl	8001f50 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020c00 	.word	0x40020c00
 800120c:	20000098 	.word	0x20000098

08001210 <TIM2_Setup>:
}*/
//*********************************************************************
//Setup do timer 2
//*********************************************************************
void TIM2_Setup(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
    // Ativar o clock do Timer3
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Corrigido para TIM3
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <TIM2_Setup+0x3c>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <TIM2_Setup+0x3c>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 83;                      // Prescaler para incrementos a cada 1us (assumindo que o clock é 84MHz)
 8001220:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001224:	2253      	movs	r2, #83	@ 0x53
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->EGR = TIM_EGR_UG;              // Evento de atualização para escrever o valor do prescaler
 8001228:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122c:	2201      	movs	r2, #1
 800122e:	615a      	str	r2, [r3, #20]
    TIM2->CR1 |= TIM_CR1_CEN;            // Habilita o timer
 8001230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <Delay_us>:
//*********************************************************************
//Criação de atraso em us
//*********************************************************************
void Delay_us(uint32_t delay)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0;				//inicializa o contador com 0
 8001258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM2->CNT < delay);	//aguarda o tempo passar
 8001260:	bf00      	nop
 8001262:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	d8f9      	bhi.n	8001262 <Delay_us+0x12>
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <USART1_Init>:
//Funções de periféricos de comunicação
//*********************************************************************
//Configuração básica da USART1
//*********************************************************************
void USART1_Init(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	//Configuração da USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;				//habilita o clock da USART1
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <USART1_Init+0x54>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <USART1_Init+0x54>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6453      	str	r3, [r2, #68]	@ 0x44
	USART1->BRR = 84;									//ajusta baud rate para 1 Mbps (frequência do periférico de 84MHz)
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <USART1_Init+0x58>)
 800128e:	2254      	movs	r2, #84	@ 0x54
 8001290:	609a      	str	r2, [r3, #8]
	//O estado default do registrador USART1->CR1 garante:
	//1 stop bit, 8 bits de dados, sem bit de paridade,
	//oversampling de 16 amostras por bit
	USART1->CR1 |= (USART_CR1_TE | USART_CR1_UE);		//habilita apenas o trasmissor e a USART1
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <USART1_Init+0x58>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <USART1_Init+0x58>)
 8001298:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	60d3      	str	r3, [r2, #12]
	//Habilita a interrupção da USART1 no NVIC
	//NVIC_SetPriority(USART1_IRQn, 0);	//seta a prioridade da USART1
	//NVIC_EnableIRQ(USART1_IRQn);		//habilita a interrupção da USART1

	//Configuração dos pinos PA9 (TX) e PA10(RX)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			//habilita o clock do GPIOA
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <USART1_Init+0x54>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <USART1_Init+0x54>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (0b10 << 20) | (0b10 << 18);	//pinos PA10 e PA9 em função alternativa
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <USART1_Init+0x5c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a09      	ldr	r2, [pc, #36]	@ (80012d8 <USART1_Init+0x5c>)
 80012b4:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80012b8:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (0b0111 << 8) | (0b0111 << 4);	//função alternativa 7 (USART1)
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <USART1_Init+0x5c>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <USART1_Init+0x5c>)
 80012c0:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80012c4:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40020000 	.word	0x40020000

080012dc <__io_putchar>:

//Redefinição da função de envio de dados pela USART1
int __io_putchar(int ch)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	USART1->DR = ch;						//transmite o dado
 80012e4:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <__io_putchar+0x2c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE));	//espera pelo fim da transmissão
 80012ea:	bf00      	nop
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <__io_putchar+0x2c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f9      	beq.n	80012ec <__io_putchar+0x10>
	return ch;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40011000 	.word	0x40011000

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001312:	f000 fb05 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001316:	f000 f857 	bl	80013c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  USART1_Init();
 800131a:	f7ff ffaf 	bl	800127c <USART1_Init>
  TIM2_Setup();
 800131e:	f7ff ff77 	bl	8001210 <TIM2_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 f905 	bl	8001530 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001326:	f000 f8cd 	bl	80014c4 <MX_SPI2_Init>
  MX_RNG_Init();
 800132a:	f000 f8b7 	bl	800149c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 800132e:	f7ff f9ed 	bl	800070c <ILI9341_Init>
HAL_Delay(1000);
 8001332:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001336:	f000 fb65 	bl	8001a04 <HAL_Delay>
printf("prinfdada\n");
 800133a:	481d      	ldr	r0, [pc, #116]	@ (80013b0 <main+0xa4>)
 800133c:	f001 fe32 	bl	8002fa4 <puts>
	ILI9341_Fill_Screen(WHITE);
 8001340:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001344:	f7ff fb8e 	bl	8000a64 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff f981 	bl	8000650 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 800134e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	2301      	movs	r3, #1
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	220a      	movs	r2, #10
 800135c:	210a      	movs	r1, #10
 800135e:	4815      	ldr	r0, [pc, #84]	@ (80013b4 <main+0xa8>)
 8001360:	f7ff fd76 	bl	8000e50 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ASSERT LOGO", 10, 20, BLACK, 1, WHITE);
 8001364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	2301      	movs	r3, #1
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	2214      	movs	r2, #20
 8001372:	210a      	movs	r1, #10
 8001374:	4810      	ldr	r0, [pc, #64]	@ (80013b8 <main+0xac>)
 8001376:	f7ff fd6b 	bl	8000e50 <ILI9341_Draw_Text>
	HAL_Delay(2000);
 800137a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800137e:	f000 fb41 	bl	8001a04 <HAL_Delay>
	while(1){
		ILI9341_Draw_Image((const char*) trige1, SCREEN_HORIZONTAL_2);
 8001382:	2103      	movs	r1, #3
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <main+0xb0>)
 8001386:	f7ff fd93 	bl	8000eb0 <ILI9341_Draw_Image>
		Delay_us(250);
 800138a:	20fa      	movs	r0, #250	@ 0xfa
 800138c:	f7ff ff60 	bl	8001250 <Delay_us>
		ILI9341_Draw_Image((const char*) trige2, SCREEN_HORIZONTAL_2);
 8001390:	2103      	movs	r1, #3
 8001392:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <main+0xb4>)
 8001394:	f7ff fd8c 	bl	8000eb0 <ILI9341_Draw_Image>
		Delay_us(250);
 8001398:	20fa      	movs	r0, #250	@ 0xfa
 800139a:	f7ff ff59 	bl	8001250 <Delay_us>
		ILI9341_Draw_Image((const char*) trige3, SCREEN_HORIZONTAL_2);
 800139e:	2103      	movs	r1, #3
 80013a0:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <main+0xb8>)
 80013a2:	f7ff fd85 	bl	8000eb0 <ILI9341_Draw_Image>
		Delay_us(250);
 80013a6:	20fa      	movs	r0, #250	@ 0xfa
 80013a8:	f7ff ff52 	bl	8001250 <Delay_us>
		ILI9341_Draw_Image((const char*) trige1, SCREEN_HORIZONTAL_2);
 80013ac:	bf00      	nop
 80013ae:	e7e8      	b.n	8001382 <main+0x76>
 80013b0:	080036e4 	.word	0x080036e4
 80013b4:	080036f0 	.word	0x080036f0
 80013b8:	080036fc 	.word	0x080036fc
 80013bc:	08003948 	.word	0x08003948
 80013c0:	08029148 	.word	0x08029148
 80013c4:	0804e948 	.word	0x0804e948

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	@ 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	2230      	movs	r2, #48	@ 0x30
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 fec4 	bl	8003164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <SystemClock_Config+0xcc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <SystemClock_Config+0xcc>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <SystemClock_Config+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <SystemClock_Config+0xd0>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142c:	2310      	movs	r3, #16
 800142e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001434:	2300      	movs	r3, #0
 8001436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001438:	2308      	movs	r3, #8
 800143a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800143c:	23a8      	movs	r3, #168	@ 0xa8
 800143e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001440:	2302      	movs	r3, #2
 8001442:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001444:	2307      	movs	r3, #7
 8001446:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fd99 	bl	8001f84 <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001458:	f000 f8bc 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001460:	2302      	movs	r3, #2
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001468:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2105      	movs	r1, #5
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fffa 	bl	8002474 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001486:	f000 f8a5 	bl	80015d4 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3750      	adds	r7, #80	@ 0x50
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_RNG_Init+0x20>)
 80014a2:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <MX_RNG_Init+0x24>)
 80014a4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_RNG_Init+0x20>)
 80014a8:	f001 f990 	bl	80027cc <HAL_RNG_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80014b2:	f000 f88f 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000088 	.word	0x20000088
 80014c0:	50060800 	.word	0x50060800

080014c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014ca:	4a18      	ldr	r2, [pc, #96]	@ (800152c <MX_SPI2_Init+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <MX_SPI2_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_SPI2_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <MX_SPI2_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_SPI2_Init+0x64>)
 8001510:	220a      	movs	r2, #10
 8001512:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_SPI2_Init+0x64>)
 8001516:	f001 f983 	bl	8002820 <HAL_SPI_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001520:	f000 f858 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000098 	.word	0x20000098
 800152c:	40003800 	.word	0x40003800

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <MX_GPIO_Init+0x9c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a1f      	ldr	r2, [pc, #124]	@ (80015cc <MX_GPIO_Init+0x9c>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <MX_GPIO_Init+0x9c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_GPIO_Init+0x9c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a18      	ldr	r2, [pc, #96]	@ (80015cc <MX_GPIO_Init+0x9c>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_GPIO_Init+0x9c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_GPIO_Init+0x9c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a11      	ldr	r2, [pc, #68]	@ (80015cc <MX_GPIO_Init+0x9c>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_GPIO_Init+0x9c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CHIP_SELECT_Pin|RESET_Pin|DC_Pin|CHIP_SELECT_SDCARD_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80015a0:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <MX_GPIO_Init+0xa0>)
 80015a2:	f000 fcd5 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CHIP_SELECT_Pin RESET_Pin DC_Pin CHIP_SELECT_SDCARD_Pin */
  GPIO_InitStruct.Pin = CHIP_SELECT_Pin|RESET_Pin|DC_Pin|CHIP_SELECT_SDCARD_Pin;
 80015a6:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_GPIO_Init+0xa0>)
 80015c0:	f000 fb2a 	bl	8001c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <Error_Handler+0x8>

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <HAL_MspInit+0x4c>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <HAL_MspInit+0x4c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0b      	ldr	r2, [pc, #44]	@ (800166c <HAL_RNG_MspInit+0x3c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d10d      	bne.n	800165e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_RNG_MspInit+0x40>)
 8001648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164a:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <HAL_RNG_MspInit+0x40>)
 800164c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001650:	6353      	str	r3, [r2, #52]	@ 0x34
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <HAL_RNG_MspInit+0x40>)
 8001654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	50060800 	.word	0x50060800
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <HAL_SPI_MspInit+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12c      	bne.n	80016f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <HAL_SPI_MspInit+0x88>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <HAL_SPI_MspInit+0x88>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_SPI_MspInit+0x88>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_SPI_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <HAL_SPI_MspInit+0x88>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <HAL_SPI_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e0:	2305      	movs	r3, #5
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <HAL_SPI_MspInit+0x8c>)
 80016ec:	f000 fa94 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	@ 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40003800 	.word	0x40003800
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020400 	.word	0x40020400

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 f933 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e00a      	b.n	800178a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001774:	f3af 8000 	nop.w
 8001778:	4601      	mov	r1, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	60ba      	str	r2, [r7, #8]
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	dbf0      	blt.n	8001774 <_read+0x12>
  }

  return len;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e009      	b.n	80017c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fd90 	bl	80012dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbf1      	blt.n	80017ae <_write+0x12>
  }
  return len;
 80017ca:	687b      	ldr	r3, [r7, #4]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_close>:

int _close(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fc:	605a      	str	r2, [r3, #4]
  return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_isatty>:

int _isatty(int file)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f001 fcc8 	bl	8003200 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20020000 	.word	0x20020000
 800189c:	00000400 	.word	0x00000400
 80018a0:	200000f0 	.word	0x200000f0
 80018a4:	20000248 	.word	0x20000248

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d0:	f7ff ffea 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f001 fc87 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fd05 	bl	800130c <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001910:	08074168 	.word	0x08074168
  ldr r2, =_sbss
 8001914:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001918:	20000244 	.word	0x20000244

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <HAL_Init+0x40>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_Init+0x40>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <HAL_Init+0x40>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f931 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fe44 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f93b 	bl	8001bfe <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f911 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	@ (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000004 	.word	0x20000004
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	20000008 	.word	0x20000008

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	200000f4 	.word	0x200000f4

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200000f4 	.word	0x200000f4

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000000c 	.word	0x2000000c

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	@ (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff47 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff5c 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffb0 	bl	8001b6c <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e16b      	b.n	8001f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 815a 	bne.w	8001f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d005      	beq.n	8001c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d130      	bne.n	8001ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d017      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80b4 	beq.w	8001f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b60      	ldr	r3, [pc, #384]	@ (8001f24 <HAL_GPIO_Init+0x30c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f24 <HAL_GPIO_Init+0x30c>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dae:	4b5d      	ldr	r3, [pc, #372]	@ (8001f24 <HAL_GPIO_Init+0x30c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dba:	4a5b      	ldr	r2, [pc, #364]	@ (8001f28 <HAL_GPIO_Init+0x310>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_GPIO_Init+0x314>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d02b      	beq.n	8001e3e <HAL_GPIO_Init+0x226>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a51      	ldr	r2, [pc, #324]	@ (8001f30 <HAL_GPIO_Init+0x318>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x222>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a50      	ldr	r2, [pc, #320]	@ (8001f34 <HAL_GPIO_Init+0x31c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x21e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f38 <HAL_GPIO_Init+0x320>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x21a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4e      	ldr	r2, [pc, #312]	@ (8001f3c <HAL_GPIO_Init+0x324>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x216>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4d      	ldr	r2, [pc, #308]	@ (8001f40 <HAL_GPIO_Init+0x328>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x212>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4c      	ldr	r2, [pc, #304]	@ (8001f44 <HAL_GPIO_Init+0x32c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x20e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	@ (8001f48 <HAL_GPIO_Init+0x330>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x20a>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00e      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e22:	2308      	movs	r3, #8
 8001e24:	e00c      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e26:	2306      	movs	r3, #6
 8001e28:	e00a      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e008      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e50:	4935      	ldr	r1, [pc, #212]	@ (8001f28 <HAL_GPIO_Init+0x310>)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e82:	4a32      	ldr	r2, [pc, #200]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e88:	4b30      	ldr	r3, [pc, #192]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eac:	4a27      	ldr	r2, [pc, #156]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb2:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f00:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	f67f ae90 	bls.w	8001c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40021400 	.word	0x40021400
 8001f44:	40021800 	.word	0x40021800
 8001f48:	40021c00 	.word	0x40021c00
 8001f4c:	40013c00 	.word	0x40013c00

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e267      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d075      	beq.n	800208e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fa2:	4b88      	ldr	r3, [pc, #544]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d00c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b85      	ldr	r3, [pc, #532]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d112      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fba:	4b82      	ldr	r3, [pc, #520]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05b      	beq.n	800208c <HAL_RCC_OscConfig+0x108>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d157      	bne.n	800208c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e242      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x74>
 8001fea:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b70      	ldr	r3, [pc, #448]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6f      	ldr	r2, [pc, #444]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b6d      	ldr	r3, [pc, #436]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6c      	ldr	r2, [pc, #432]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 800201c:	4b69      	ldr	r3, [pc, #420]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a68      	ldr	r2, [pc, #416]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b66      	ldr	r3, [pc, #408]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a65      	ldr	r2, [pc, #404]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fcd6 	bl	80019ec <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fcd2 	bl	80019ec <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	@ 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e207      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b5b      	ldr	r3, [pc, #364]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0xc0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fcc2 	bl	80019ec <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fcbe 	bl	80019ec <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1f3      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	4b51      	ldr	r3, [pc, #324]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0xe8>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d063      	beq.n	8002162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800209a:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d11c      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d116      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e1c7      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4937      	ldr	r1, [pc, #220]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	e03a      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0x244>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff fc77 	bl	80019ec <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002102:	f7ff fc73 	bl	80019ec <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1a8      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4925      	ldr	r1, [pc, #148]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e015      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002136:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <HAL_RCC_OscConfig+0x244>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fc56 	bl	80019ec <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff fc52 	bl	80019ec <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e187      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d036      	beq.n	80021dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <HAL_RCC_OscConfig+0x248>)
 8002178:	2201      	movs	r2, #1
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff fc36 	bl	80019ec <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff fc32 	bl	80019ec <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e167      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x200>
 80021a2:	e01b      	b.n	80021dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <HAL_RCC_OscConfig+0x248>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fc1f 	bl	80019ec <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	e00e      	b.n	80021d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b2:	f7ff fc1b 	bl	80019ec <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d907      	bls.n	80021d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e150      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470000 	.word	0x42470000
 80021cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	4b88      	ldr	r3, [pc, #544]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ea      	bne.n	80021b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8097 	beq.w	8002318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	4b81      	ldr	r3, [pc, #516]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10f      	bne.n	800221a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b7d      	ldr	r3, [pc, #500]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4a7c      	ldr	r2, [pc, #496]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	@ 0x40
 800220a:	4b7a      	ldr	r3, [pc, #488]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b77      	ldr	r3, [pc, #476]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b74      	ldr	r3, [pc, #464]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a73      	ldr	r2, [pc, #460]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7ff fbdb 	bl	80019ec <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7ff fbd7 	bl	80019ec <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e10c      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b6a      	ldr	r3, [pc, #424]	@ (80023f8 <HAL_RCC_OscConfig+0x474>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x2ea>
 8002260:	4b64      	ldr	r3, [pc, #400]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a63      	ldr	r2, [pc, #396]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
 800226c:	e01c      	b.n	80022a8 <HAL_RCC_OscConfig+0x324>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x30c>
 8002276:	4b5f      	ldr	r3, [pc, #380]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	4a5e      	ldr	r2, [pc, #376]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6713      	str	r3, [r2, #112]	@ 0x70
 8002282:	4b5c      	ldr	r3, [pc, #368]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002286:	4a5b      	ldr	r2, [pc, #364]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6713      	str	r3, [r2, #112]	@ 0x70
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0x324>
 8002290:	4b58      	ldr	r3, [pc, #352]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002294:	4a57      	ldr	r2, [pc, #348]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	@ 0x70
 800229c:	4b55      	ldr	r3, [pc, #340]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a0:	4a54      	ldr	r2, [pc, #336]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff fb9c 	bl	80019ec <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7ff fb98 	bl	80019ec <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0cb      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	4b49      	ldr	r3, [pc, #292]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ee      	beq.n	80022b8 <HAL_RCC_OscConfig+0x334>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fb86 	bl	80019ec <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7ff fb82 	bl	80019ec <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0b5      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ee      	bne.n	80022e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	4a38      	ldr	r2, [pc, #224]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a1 	beq.w	8002464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002322:	4b34      	ldr	r3, [pc, #208]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b08      	cmp	r3, #8
 800232c:	d05c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d141      	bne.n	80023ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff fb56 	bl	80019ec <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff fb52 	bl	80019ec <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e087      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	3b01      	subs	r3, #1
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	491b      	ldr	r1, [pc, #108]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCC_OscConfig+0x478>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff fb2b 	bl	80019ec <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7ff fb27 	bl	80019ec <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e05c      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x416>
 80023b8:	e054      	b.n	8002464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <HAL_RCC_OscConfig+0x478>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fb14 	bl	80019ec <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff fb10 	bl	80019ec <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e045      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_RCC_OscConfig+0x470>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x444>
 80023e6:	e03d      	b.n	8002464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e038      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_RCC_OscConfig+0x4ec>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d028      	beq.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d121      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d11a      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d111      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cc      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b68      	ldr	r3, [pc, #416]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b65      	ldr	r3, [pc, #404]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e067      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4934      	ldr	r1, [pc, #208]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7ff fa42 	bl	80019ec <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff fa3e 	bl	80019ec <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b25      	ldr	r3, [pc, #148]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b22      	ldr	r3, [pc, #136]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f9a2 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	08074148 	.word	0x08074148
 8002638:	20000004 	.word	0x20000004
 800263c:	20000008 	.word	0x20000008

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002644:	b090      	sub	sp, #64	@ 0x40
 8002646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d00d      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x40>
 8002664:	2b08      	cmp	r3, #8
 8002666:	f200 80a1 	bhi.w	80027ac <HAL_RCC_GetSysClockFreq+0x16c>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x34>
 800266e:	2b04      	cmp	r3, #4
 8002670:	d003      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x3a>
 8002672:	e09b      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002676:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002678:	e09b      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267a:	4b53      	ldr	r3, [pc, #332]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800267e:	e098      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002680:	4b4f      	ldr	r3, [pc, #316]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800268a:	4b4d      	ldr	r3, [pc, #308]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d028      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002696:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	2200      	movs	r2, #0
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026a8:	2100      	movs	r1, #0
 80026aa:	4b47      	ldr	r3, [pc, #284]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ac:	fb03 f201 	mul.w	r2, r3, r1
 80026b0:	2300      	movs	r3, #0
 80026b2:	fb00 f303 	mul.w	r3, r0, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	4a43      	ldr	r2, [pc, #268]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ba:	fba0 1202 	umull	r1, r2, r0, r2
 80026be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c0:	460a      	mov	r2, r1
 80026c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026c6:	4413      	add	r3, r2
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	2200      	movs	r2, #0
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	61fa      	str	r2, [r7, #28]
 80026d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026da:	f7fd fd75 	bl	80001c8 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4613      	mov	r3, r2
 80026e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026e6:	e053      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e8:	4b35      	ldr	r3, [pc, #212]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	2200      	movs	r2, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	617a      	str	r2, [r7, #20]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026fa:	f04f 0b00 	mov.w	fp, #0
 80026fe:	4652      	mov	r2, sl
 8002700:	465b      	mov	r3, fp
 8002702:	f04f 0000 	mov.w	r0, #0
 8002706:	f04f 0100 	mov.w	r1, #0
 800270a:	0159      	lsls	r1, r3, #5
 800270c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002710:	0150      	lsls	r0, r2, #5
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ebb2 080a 	subs.w	r8, r2, sl
 800271a:	eb63 090b 	sbc.w	r9, r3, fp
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800272a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800272e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002732:	ebb2 0408 	subs.w	r4, r2, r8
 8002736:	eb63 0509 	sbc.w	r5, r3, r9
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	00eb      	lsls	r3, r5, #3
 8002744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002748:	00e2      	lsls	r2, r4, #3
 800274a:	4614      	mov	r4, r2
 800274c:	461d      	mov	r5, r3
 800274e:	eb14 030a 	adds.w	r3, r4, sl
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	eb45 030b 	adc.w	r3, r5, fp
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002766:	4629      	mov	r1, r5
 8002768:	028b      	lsls	r3, r1, #10
 800276a:	4621      	mov	r1, r4
 800276c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002770:	4621      	mov	r1, r4
 8002772:	028a      	lsls	r2, r1, #10
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277a:	2200      	movs	r2, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	60fa      	str	r2, [r7, #12]
 8002780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002784:	f7fd fd20 	bl	80001c8 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80027a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3740      	adds	r7, #64	@ 0x40
 80027b8:	46bd      	mov	sp, r7
 80027ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	017d7840 	.word	0x017d7840

080027cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e01c      	b.n	8002818 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	795b      	ldrb	r3, [r3, #5]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe ff1e 	bl	8001630 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0204 	orr.w	r2, r2, #4
 8002808:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e07b      	b.n	800292a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002842:	d009      	beq.n	8002858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
 800284a:	e005      	b.n	8002858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe fefe 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800288e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028dc:	ea42 0103 	orr.w	r1, r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	f003 0104 	and.w	r1, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f003 0210 	and.w	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b088      	sub	sp, #32
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002942:	f7ff f853 	bl	80019ec <HAL_GetTick>
 8002946:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d001      	beq.n	800295c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
 800295a:	e12a      	b.n	8002bb2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_SPI_Transmit+0x36>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e122      	b.n	8002bb2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_SPI_Transmit+0x48>
 8002976:	2302      	movs	r3, #2
 8002978:	e11b      	b.n	8002bb2 <HAL_SPI_Transmit+0x280>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2203      	movs	r2, #3
 8002986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029c8:	d10f      	bne.n	80029ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f4:	2b40      	cmp	r3, #64	@ 0x40
 80029f6:	d007      	beq.n	8002a08 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a10:	d152      	bne.n	8002ab8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_SPI_Transmit+0xee>
 8002a1a:	8b7b      	ldrh	r3, [r7, #26]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d145      	bne.n	8002aac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a44:	e032      	b.n	8002aac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d112      	bne.n	8002a7a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	1c9a      	adds	r2, r3, #2
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a78:	e018      	b.n	8002aac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a7a:	f7fe ffb7 	bl	80019ec <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d803      	bhi.n	8002a92 <HAL_SPI_Transmit+0x160>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d102      	bne.n	8002a98 <HAL_SPI_Transmit+0x166>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e082      	b.n	8002bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1c7      	bne.n	8002a46 <HAL_SPI_Transmit+0x114>
 8002ab6:	e053      	b.n	8002b60 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_SPI_Transmit+0x194>
 8002ac0:	8b7b      	ldrh	r3, [r7, #26]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d147      	bne.n	8002b56 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aec:	e033      	b.n	8002b56 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d113      	bne.n	8002b24 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b22:	e018      	b.n	8002b56 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b24:	f7fe ff62 	bl	80019ec <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d803      	bhi.n	8002b3c <HAL_SPI_Transmit+0x20a>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d102      	bne.n	8002b42 <HAL_SPI_Transmit+0x210>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e02d      	b.n	8002bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1c6      	bne.n	8002aee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f8b1 	bl	8002ccc <SPI_EndRxTxTransaction>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bcc:	f7fe ff0e 	bl	80019ec <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bdc:	f7fe ff06 	bl	80019ec <HAL_GetTick>
 8002be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	015b      	lsls	r3, r3, #5
 8002be8:	0d1b      	lsrs	r3, r3, #20
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bf2:	e054      	b.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d050      	beq.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bfc:	f7fe fef6 	bl	80019ec <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d902      	bls.n	8002c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d13d      	bne.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c2a:	d111      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c34:	d004      	beq.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d107      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c58:	d10f      	bne.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e017      	b.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d19b      	bne.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000004 	.word	0x20000004

08002ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff ff6a 	bl	8002bbc <SPI_WaitFlagStateUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e032      	b.n	8002d64 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <SPI_EndRxTxTransaction+0xa0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	@ (8002d70 <SPI_EndRxTxTransaction+0xa4>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	0d5b      	lsrs	r3, r3, #21
 8002d0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d1c:	d112      	bne.n	8002d44 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	@ 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff ff47 	bl	8002bbc <SPI_WaitFlagStateUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d016      	beq.n	8002d62 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e00f      	b.n	8002d64 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5a:	2b80      	cmp	r3, #128	@ 0x80
 8002d5c:	d0f2      	beq.n	8002d44 <SPI_EndRxTxTransaction+0x78>
 8002d5e:	e000      	b.n	8002d62 <SPI_EndRxTxTransaction+0x96>
        break;
 8002d60:	bf00      	nop
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000004 	.word	0x20000004
 8002d70:	165e9f81 	.word	0x165e9f81

08002d74 <std>:
 8002d74:	2300      	movs	r3, #0
 8002d76:	b510      	push	{r4, lr}
 8002d78:	4604      	mov	r4, r0
 8002d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d82:	6083      	str	r3, [r0, #8]
 8002d84:	8181      	strh	r1, [r0, #12]
 8002d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d88:	81c2      	strh	r2, [r0, #14]
 8002d8a:	6183      	str	r3, [r0, #24]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	2208      	movs	r2, #8
 8002d90:	305c      	adds	r0, #92	@ 0x5c
 8002d92:	f000 f9e7 	bl	8003164 <memset>
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <std+0x58>)
 8002d98:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <std+0x5c>)
 8002d9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <std+0x60>)
 8002da0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <std+0x64>)
 8002da4:	6323      	str	r3, [r4, #48]	@ 0x30
 8002da6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ddc <std+0x68>)
 8002da8:	6224      	str	r4, [r4, #32]
 8002daa:	429c      	cmp	r4, r3
 8002dac:	d006      	beq.n	8002dbc <std+0x48>
 8002dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002db2:	4294      	cmp	r4, r2
 8002db4:	d002      	beq.n	8002dbc <std+0x48>
 8002db6:	33d0      	adds	r3, #208	@ 0xd0
 8002db8:	429c      	cmp	r4, r3
 8002dba:	d105      	bne.n	8002dc8 <std+0x54>
 8002dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc4:	f000 ba46 	b.w	8003254 <__retarget_lock_init_recursive>
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	bf00      	nop
 8002dcc:	08002fb5 	.word	0x08002fb5
 8002dd0:	08002fd7 	.word	0x08002fd7
 8002dd4:	0800300f 	.word	0x0800300f
 8002dd8:	08003033 	.word	0x08003033
 8002ddc:	200000f8 	.word	0x200000f8

08002de0 <stdio_exit_handler>:
 8002de0:	4a02      	ldr	r2, [pc, #8]	@ (8002dec <stdio_exit_handler+0xc>)
 8002de2:	4903      	ldr	r1, [pc, #12]	@ (8002df0 <stdio_exit_handler+0x10>)
 8002de4:	4803      	ldr	r0, [pc, #12]	@ (8002df4 <stdio_exit_handler+0x14>)
 8002de6:	f000 b869 	b.w	8002ebc <_fwalk_sglue>
 8002dea:	bf00      	nop
 8002dec:	20000010 	.word	0x20000010
 8002df0:	08003555 	.word	0x08003555
 8002df4:	20000020 	.word	0x20000020

08002df8 <cleanup_stdio>:
 8002df8:	6841      	ldr	r1, [r0, #4]
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <cleanup_stdio+0x34>)
 8002dfc:	4299      	cmp	r1, r3
 8002dfe:	b510      	push	{r4, lr}
 8002e00:	4604      	mov	r4, r0
 8002e02:	d001      	beq.n	8002e08 <cleanup_stdio+0x10>
 8002e04:	f000 fba6 	bl	8003554 <_fflush_r>
 8002e08:	68a1      	ldr	r1, [r4, #8]
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <cleanup_stdio+0x38>)
 8002e0c:	4299      	cmp	r1, r3
 8002e0e:	d002      	beq.n	8002e16 <cleanup_stdio+0x1e>
 8002e10:	4620      	mov	r0, r4
 8002e12:	f000 fb9f 	bl	8003554 <_fflush_r>
 8002e16:	68e1      	ldr	r1, [r4, #12]
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <cleanup_stdio+0x3c>)
 8002e1a:	4299      	cmp	r1, r3
 8002e1c:	d004      	beq.n	8002e28 <cleanup_stdio+0x30>
 8002e1e:	4620      	mov	r0, r4
 8002e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e24:	f000 bb96 	b.w	8003554 <_fflush_r>
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200000f8 	.word	0x200000f8
 8002e30:	20000160 	.word	0x20000160
 8002e34:	200001c8 	.word	0x200001c8

08002e38 <global_stdio_init.part.0>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <global_stdio_init.part.0+0x30>)
 8002e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e6c <global_stdio_init.part.0+0x34>)
 8002e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e70 <global_stdio_init.part.0+0x38>)
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	4620      	mov	r0, r4
 8002e44:	2200      	movs	r2, #0
 8002e46:	2104      	movs	r1, #4
 8002e48:	f7ff ff94 	bl	8002d74 <std>
 8002e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e50:	2201      	movs	r2, #1
 8002e52:	2109      	movs	r1, #9
 8002e54:	f7ff ff8e 	bl	8002d74 <std>
 8002e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e62:	2112      	movs	r1, #18
 8002e64:	f7ff bf86 	b.w	8002d74 <std>
 8002e68:	20000230 	.word	0x20000230
 8002e6c:	200000f8 	.word	0x200000f8
 8002e70:	08002de1 	.word	0x08002de1

08002e74 <__sfp_lock_acquire>:
 8002e74:	4801      	ldr	r0, [pc, #4]	@ (8002e7c <__sfp_lock_acquire+0x8>)
 8002e76:	f000 b9ee 	b.w	8003256 <__retarget_lock_acquire_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	20000239 	.word	0x20000239

08002e80 <__sfp_lock_release>:
 8002e80:	4801      	ldr	r0, [pc, #4]	@ (8002e88 <__sfp_lock_release+0x8>)
 8002e82:	f000 b9e9 	b.w	8003258 <__retarget_lock_release_recursive>
 8002e86:	bf00      	nop
 8002e88:	20000239 	.word	0x20000239

08002e8c <__sinit>:
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	4604      	mov	r4, r0
 8002e90:	f7ff fff0 	bl	8002e74 <__sfp_lock_acquire>
 8002e94:	6a23      	ldr	r3, [r4, #32]
 8002e96:	b11b      	cbz	r3, 8002ea0 <__sinit+0x14>
 8002e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e9c:	f7ff bff0 	b.w	8002e80 <__sfp_lock_release>
 8002ea0:	4b04      	ldr	r3, [pc, #16]	@ (8002eb4 <__sinit+0x28>)
 8002ea2:	6223      	str	r3, [r4, #32]
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <__sinit+0x2c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f5      	bne.n	8002e98 <__sinit+0xc>
 8002eac:	f7ff ffc4 	bl	8002e38 <global_stdio_init.part.0>
 8002eb0:	e7f2      	b.n	8002e98 <__sinit+0xc>
 8002eb2:	bf00      	nop
 8002eb4:	08002df9 	.word	0x08002df9
 8002eb8:	20000230 	.word	0x20000230

08002ebc <_fwalk_sglue>:
 8002ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	4607      	mov	r7, r0
 8002ec2:	4688      	mov	r8, r1
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8002ed0:	d505      	bpl.n	8002ede <_fwalk_sglue+0x22>
 8002ed2:	6824      	ldr	r4, [r4, #0]
 8002ed4:	2c00      	cmp	r4, #0
 8002ed6:	d1f7      	bne.n	8002ec8 <_fwalk_sglue+0xc>
 8002ed8:	4630      	mov	r0, r6
 8002eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ede:	89ab      	ldrh	r3, [r5, #12]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d907      	bls.n	8002ef4 <_fwalk_sglue+0x38>
 8002ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	d003      	beq.n	8002ef4 <_fwalk_sglue+0x38>
 8002eec:	4629      	mov	r1, r5
 8002eee:	4638      	mov	r0, r7
 8002ef0:	47c0      	blx	r8
 8002ef2:	4306      	orrs	r6, r0
 8002ef4:	3568      	adds	r5, #104	@ 0x68
 8002ef6:	e7e9      	b.n	8002ecc <_fwalk_sglue+0x10>

08002ef8 <_puts_r>:
 8002ef8:	6a03      	ldr	r3, [r0, #32]
 8002efa:	b570      	push	{r4, r5, r6, lr}
 8002efc:	6884      	ldr	r4, [r0, #8]
 8002efe:	4605      	mov	r5, r0
 8002f00:	460e      	mov	r6, r1
 8002f02:	b90b      	cbnz	r3, 8002f08 <_puts_r+0x10>
 8002f04:	f7ff ffc2 	bl	8002e8c <__sinit>
 8002f08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f0a:	07db      	lsls	r3, r3, #31
 8002f0c:	d405      	bmi.n	8002f1a <_puts_r+0x22>
 8002f0e:	89a3      	ldrh	r3, [r4, #12]
 8002f10:	0598      	lsls	r0, r3, #22
 8002f12:	d402      	bmi.n	8002f1a <_puts_r+0x22>
 8002f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f16:	f000 f99e 	bl	8003256 <__retarget_lock_acquire_recursive>
 8002f1a:	89a3      	ldrh	r3, [r4, #12]
 8002f1c:	0719      	lsls	r1, r3, #28
 8002f1e:	d502      	bpl.n	8002f26 <_puts_r+0x2e>
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d135      	bne.n	8002f92 <_puts_r+0x9a>
 8002f26:	4621      	mov	r1, r4
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f000 f8c5 	bl	80030b8 <__swsetup_r>
 8002f2e:	b380      	cbz	r0, 8002f92 <_puts_r+0x9a>
 8002f30:	f04f 35ff 	mov.w	r5, #4294967295
 8002f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f36:	07da      	lsls	r2, r3, #31
 8002f38:	d405      	bmi.n	8002f46 <_puts_r+0x4e>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	059b      	lsls	r3, r3, #22
 8002f3e:	d402      	bmi.n	8002f46 <_puts_r+0x4e>
 8002f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f42:	f000 f989 	bl	8003258 <__retarget_lock_release_recursive>
 8002f46:	4628      	mov	r0, r5
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da04      	bge.n	8002f58 <_puts_r+0x60>
 8002f4e:	69a2      	ldr	r2, [r4, #24]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dc17      	bgt.n	8002f84 <_puts_r+0x8c>
 8002f54:	290a      	cmp	r1, #10
 8002f56:	d015      	beq.n	8002f84 <_puts_r+0x8c>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	6022      	str	r2, [r4, #0]
 8002f5e:	7019      	strb	r1, [r3, #0]
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f66:	3b01      	subs	r3, #1
 8002f68:	60a3      	str	r3, [r4, #8]
 8002f6a:	2900      	cmp	r1, #0
 8002f6c:	d1ed      	bne.n	8002f4a <_puts_r+0x52>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da11      	bge.n	8002f96 <_puts_r+0x9e>
 8002f72:	4622      	mov	r2, r4
 8002f74:	210a      	movs	r1, #10
 8002f76:	4628      	mov	r0, r5
 8002f78:	f000 f85f 	bl	800303a <__swbuf_r>
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d0d7      	beq.n	8002f30 <_puts_r+0x38>
 8002f80:	250a      	movs	r5, #10
 8002f82:	e7d7      	b.n	8002f34 <_puts_r+0x3c>
 8002f84:	4622      	mov	r2, r4
 8002f86:	4628      	mov	r0, r5
 8002f88:	f000 f857 	bl	800303a <__swbuf_r>
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d1e7      	bne.n	8002f60 <_puts_r+0x68>
 8002f90:	e7ce      	b.n	8002f30 <_puts_r+0x38>
 8002f92:	3e01      	subs	r6, #1
 8002f94:	e7e4      	b.n	8002f60 <_puts_r+0x68>
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	6022      	str	r2, [r4, #0]
 8002f9c:	220a      	movs	r2, #10
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e7ee      	b.n	8002f80 <_puts_r+0x88>
	...

08002fa4 <puts>:
 8002fa4:	4b02      	ldr	r3, [pc, #8]	@ (8002fb0 <puts+0xc>)
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	f7ff bfa5 	b.w	8002ef8 <_puts_r>
 8002fae:	bf00      	nop
 8002fb0:	2000001c 	.word	0x2000001c

08002fb4 <__sread>:
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fbc:	f000 f8fc 	bl	80031b8 <_read_r>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	bfab      	itete	ge
 8002fc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8002fc8:	181b      	addge	r3, r3, r0
 8002fca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002fce:	bfac      	ite	ge
 8002fd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002fd2:	81a3      	strhlt	r3, [r4, #12]
 8002fd4:	bd10      	pop	{r4, pc}

08002fd6 <__swrite>:
 8002fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fda:	461f      	mov	r7, r3
 8002fdc:	898b      	ldrh	r3, [r1, #12]
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	4605      	mov	r5, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	4616      	mov	r6, r2
 8002fe6:	d505      	bpl.n	8002ff4 <__swrite+0x1e>
 8002fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fec:	2302      	movs	r3, #2
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f000 f8d0 	bl	8003194 <_lseek_r>
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	4632      	mov	r2, r6
 8003002:	463b      	mov	r3, r7
 8003004:	4628      	mov	r0, r5
 8003006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800300a:	f000 b8e7 	b.w	80031dc <_write_r>

0800300e <__sseek>:
 800300e:	b510      	push	{r4, lr}
 8003010:	460c      	mov	r4, r1
 8003012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003016:	f000 f8bd 	bl	8003194 <_lseek_r>
 800301a:	1c43      	adds	r3, r0, #1
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	bf15      	itete	ne
 8003020:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800302a:	81a3      	strheq	r3, [r4, #12]
 800302c:	bf18      	it	ne
 800302e:	81a3      	strhne	r3, [r4, #12]
 8003030:	bd10      	pop	{r4, pc}

08003032 <__sclose>:
 8003032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003036:	f000 b89d 	b.w	8003174 <_close_r>

0800303a <__swbuf_r>:
 800303a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303c:	460e      	mov	r6, r1
 800303e:	4614      	mov	r4, r2
 8003040:	4605      	mov	r5, r0
 8003042:	b118      	cbz	r0, 800304c <__swbuf_r+0x12>
 8003044:	6a03      	ldr	r3, [r0, #32]
 8003046:	b90b      	cbnz	r3, 800304c <__swbuf_r+0x12>
 8003048:	f7ff ff20 	bl	8002e8c <__sinit>
 800304c:	69a3      	ldr	r3, [r4, #24]
 800304e:	60a3      	str	r3, [r4, #8]
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	071a      	lsls	r2, r3, #28
 8003054:	d501      	bpl.n	800305a <__swbuf_r+0x20>
 8003056:	6923      	ldr	r3, [r4, #16]
 8003058:	b943      	cbnz	r3, 800306c <__swbuf_r+0x32>
 800305a:	4621      	mov	r1, r4
 800305c:	4628      	mov	r0, r5
 800305e:	f000 f82b 	bl	80030b8 <__swsetup_r>
 8003062:	b118      	cbz	r0, 800306c <__swbuf_r+0x32>
 8003064:	f04f 37ff 	mov.w	r7, #4294967295
 8003068:	4638      	mov	r0, r7
 800306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	6922      	ldr	r2, [r4, #16]
 8003070:	1a98      	subs	r0, r3, r2
 8003072:	6963      	ldr	r3, [r4, #20]
 8003074:	b2f6      	uxtb	r6, r6
 8003076:	4283      	cmp	r3, r0
 8003078:	4637      	mov	r7, r6
 800307a:	dc05      	bgt.n	8003088 <__swbuf_r+0x4e>
 800307c:	4621      	mov	r1, r4
 800307e:	4628      	mov	r0, r5
 8003080:	f000 fa68 	bl	8003554 <_fflush_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	d1ed      	bne.n	8003064 <__swbuf_r+0x2a>
 8003088:	68a3      	ldr	r3, [r4, #8]
 800308a:	3b01      	subs	r3, #1
 800308c:	60a3      	str	r3, [r4, #8]
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	6022      	str	r2, [r4, #0]
 8003094:	701e      	strb	r6, [r3, #0]
 8003096:	6962      	ldr	r2, [r4, #20]
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	429a      	cmp	r2, r3
 800309c:	d004      	beq.n	80030a8 <__swbuf_r+0x6e>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	07db      	lsls	r3, r3, #31
 80030a2:	d5e1      	bpl.n	8003068 <__swbuf_r+0x2e>
 80030a4:	2e0a      	cmp	r6, #10
 80030a6:	d1df      	bne.n	8003068 <__swbuf_r+0x2e>
 80030a8:	4621      	mov	r1, r4
 80030aa:	4628      	mov	r0, r5
 80030ac:	f000 fa52 	bl	8003554 <_fflush_r>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d0d9      	beq.n	8003068 <__swbuf_r+0x2e>
 80030b4:	e7d6      	b.n	8003064 <__swbuf_r+0x2a>
	...

080030b8 <__swsetup_r>:
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <__swsetup_r+0xa8>)
 80030bc:	4605      	mov	r5, r0
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	460c      	mov	r4, r1
 80030c2:	b118      	cbz	r0, 80030cc <__swsetup_r+0x14>
 80030c4:	6a03      	ldr	r3, [r0, #32]
 80030c6:	b90b      	cbnz	r3, 80030cc <__swsetup_r+0x14>
 80030c8:	f7ff fee0 	bl	8002e8c <__sinit>
 80030cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d0:	0719      	lsls	r1, r3, #28
 80030d2:	d422      	bmi.n	800311a <__swsetup_r+0x62>
 80030d4:	06da      	lsls	r2, r3, #27
 80030d6:	d407      	bmi.n	80030e8 <__swsetup_r+0x30>
 80030d8:	2209      	movs	r2, #9
 80030da:	602a      	str	r2, [r5, #0]
 80030dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	f04f 30ff 	mov.w	r0, #4294967295
 80030e6:	e033      	b.n	8003150 <__swsetup_r+0x98>
 80030e8:	0758      	lsls	r0, r3, #29
 80030ea:	d512      	bpl.n	8003112 <__swsetup_r+0x5a>
 80030ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030ee:	b141      	cbz	r1, 8003102 <__swsetup_r+0x4a>
 80030f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030f4:	4299      	cmp	r1, r3
 80030f6:	d002      	beq.n	80030fe <__swsetup_r+0x46>
 80030f8:	4628      	mov	r0, r5
 80030fa:	f000 f8af 	bl	800325c <_free_r>
 80030fe:	2300      	movs	r3, #0
 8003100:	6363      	str	r3, [r4, #52]	@ 0x34
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003108:	81a3      	strh	r3, [r4, #12]
 800310a:	2300      	movs	r3, #0
 800310c:	6063      	str	r3, [r4, #4]
 800310e:	6923      	ldr	r3, [r4, #16]
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	6923      	ldr	r3, [r4, #16]
 800311c:	b94b      	cbnz	r3, 8003132 <__swsetup_r+0x7a>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003128:	d003      	beq.n	8003132 <__swsetup_r+0x7a>
 800312a:	4621      	mov	r1, r4
 800312c:	4628      	mov	r0, r5
 800312e:	f000 fa5f 	bl	80035f0 <__smakebuf_r>
 8003132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003136:	f013 0201 	ands.w	r2, r3, #1
 800313a:	d00a      	beq.n	8003152 <__swsetup_r+0x9a>
 800313c:	2200      	movs	r2, #0
 800313e:	60a2      	str	r2, [r4, #8]
 8003140:	6962      	ldr	r2, [r4, #20]
 8003142:	4252      	negs	r2, r2
 8003144:	61a2      	str	r2, [r4, #24]
 8003146:	6922      	ldr	r2, [r4, #16]
 8003148:	b942      	cbnz	r2, 800315c <__swsetup_r+0xa4>
 800314a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800314e:	d1c5      	bne.n	80030dc <__swsetup_r+0x24>
 8003150:	bd38      	pop	{r3, r4, r5, pc}
 8003152:	0799      	lsls	r1, r3, #30
 8003154:	bf58      	it	pl
 8003156:	6962      	ldrpl	r2, [r4, #20]
 8003158:	60a2      	str	r2, [r4, #8]
 800315a:	e7f4      	b.n	8003146 <__swsetup_r+0x8e>
 800315c:	2000      	movs	r0, #0
 800315e:	e7f7      	b.n	8003150 <__swsetup_r+0x98>
 8003160:	2000001c 	.word	0x2000001c

08003164 <memset>:
 8003164:	4402      	add	r2, r0
 8003166:	4603      	mov	r3, r0
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <memset+0xa>
 800316c:	4770      	bx	lr
 800316e:	f803 1b01 	strb.w	r1, [r3], #1
 8003172:	e7f9      	b.n	8003168 <memset+0x4>

08003174 <_close_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4d06      	ldr	r5, [pc, #24]	@ (8003190 <_close_r+0x1c>)
 8003178:	2300      	movs	r3, #0
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	602b      	str	r3, [r5, #0]
 8003180:	f7fe fb28 	bl	80017d4 <_close>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_close_r+0x1a>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_close_r+0x1a>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	20000234 	.word	0x20000234

08003194 <_lseek_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4d07      	ldr	r5, [pc, #28]	@ (80031b4 <_lseek_r+0x20>)
 8003198:	4604      	mov	r4, r0
 800319a:	4608      	mov	r0, r1
 800319c:	4611      	mov	r1, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	602a      	str	r2, [r5, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f7fe fb3d 	bl	8001822 <_lseek>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_lseek_r+0x1e>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_lseek_r+0x1e>
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	20000234 	.word	0x20000234

080031b8 <_read_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4d07      	ldr	r5, [pc, #28]	@ (80031d8 <_read_r+0x20>)
 80031bc:	4604      	mov	r4, r0
 80031be:	4608      	mov	r0, r1
 80031c0:	4611      	mov	r1, r2
 80031c2:	2200      	movs	r2, #0
 80031c4:	602a      	str	r2, [r5, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f7fe facb 	bl	8001762 <_read>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d102      	bne.n	80031d6 <_read_r+0x1e>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	b103      	cbz	r3, 80031d6 <_read_r+0x1e>
 80031d4:	6023      	str	r3, [r4, #0]
 80031d6:	bd38      	pop	{r3, r4, r5, pc}
 80031d8:	20000234 	.word	0x20000234

080031dc <_write_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4d07      	ldr	r5, [pc, #28]	@ (80031fc <_write_r+0x20>)
 80031e0:	4604      	mov	r4, r0
 80031e2:	4608      	mov	r0, r1
 80031e4:	4611      	mov	r1, r2
 80031e6:	2200      	movs	r2, #0
 80031e8:	602a      	str	r2, [r5, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f7fe fad6 	bl	800179c <_write>
 80031f0:	1c43      	adds	r3, r0, #1
 80031f2:	d102      	bne.n	80031fa <_write_r+0x1e>
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	b103      	cbz	r3, 80031fa <_write_r+0x1e>
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	bd38      	pop	{r3, r4, r5, pc}
 80031fc:	20000234 	.word	0x20000234

08003200 <__errno>:
 8003200:	4b01      	ldr	r3, [pc, #4]	@ (8003208 <__errno+0x8>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	2000001c 	.word	0x2000001c

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	4d0d      	ldr	r5, [pc, #52]	@ (8003244 <__libc_init_array+0x38>)
 8003210:	4c0d      	ldr	r4, [pc, #52]	@ (8003248 <__libc_init_array+0x3c>)
 8003212:	1b64      	subs	r4, r4, r5
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	2600      	movs	r6, #0
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	4d0b      	ldr	r5, [pc, #44]	@ (800324c <__libc_init_array+0x40>)
 800321e:	4c0c      	ldr	r4, [pc, #48]	@ (8003250 <__libc_init_array+0x44>)
 8003220:	f000 fa54 	bl	80036cc <_init>
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	2600      	movs	r6, #0
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08074160 	.word	0x08074160
 8003248:	08074160 	.word	0x08074160
 800324c:	08074160 	.word	0x08074160
 8003250:	08074164 	.word	0x08074164

08003254 <__retarget_lock_init_recursive>:
 8003254:	4770      	bx	lr

08003256 <__retarget_lock_acquire_recursive>:
 8003256:	4770      	bx	lr

08003258 <__retarget_lock_release_recursive>:
 8003258:	4770      	bx	lr
	...

0800325c <_free_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4605      	mov	r5, r0
 8003260:	2900      	cmp	r1, #0
 8003262:	d041      	beq.n	80032e8 <_free_r+0x8c>
 8003264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003268:	1f0c      	subs	r4, r1, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	bfb8      	it	lt
 800326e:	18e4      	addlt	r4, r4, r3
 8003270:	f000 f8e0 	bl	8003434 <__malloc_lock>
 8003274:	4a1d      	ldr	r2, [pc, #116]	@ (80032ec <_free_r+0x90>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	b933      	cbnz	r3, 8003288 <_free_r+0x2c>
 800327a:	6063      	str	r3, [r4, #4]
 800327c:	6014      	str	r4, [r2, #0]
 800327e:	4628      	mov	r0, r5
 8003280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003284:	f000 b8dc 	b.w	8003440 <__malloc_unlock>
 8003288:	42a3      	cmp	r3, r4
 800328a:	d908      	bls.n	800329e <_free_r+0x42>
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	1821      	adds	r1, r4, r0
 8003290:	428b      	cmp	r3, r1
 8003292:	bf01      	itttt	eq
 8003294:	6819      	ldreq	r1, [r3, #0]
 8003296:	685b      	ldreq	r3, [r3, #4]
 8003298:	1809      	addeq	r1, r1, r0
 800329a:	6021      	streq	r1, [r4, #0]
 800329c:	e7ed      	b.n	800327a <_free_r+0x1e>
 800329e:	461a      	mov	r2, r3
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	b10b      	cbz	r3, 80032a8 <_free_r+0x4c>
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	d9fa      	bls.n	800329e <_free_r+0x42>
 80032a8:	6811      	ldr	r1, [r2, #0]
 80032aa:	1850      	adds	r0, r2, r1
 80032ac:	42a0      	cmp	r0, r4
 80032ae:	d10b      	bne.n	80032c8 <_free_r+0x6c>
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	4401      	add	r1, r0
 80032b4:	1850      	adds	r0, r2, r1
 80032b6:	4283      	cmp	r3, r0
 80032b8:	6011      	str	r1, [r2, #0]
 80032ba:	d1e0      	bne.n	800327e <_free_r+0x22>
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	6053      	str	r3, [r2, #4]
 80032c2:	4408      	add	r0, r1
 80032c4:	6010      	str	r0, [r2, #0]
 80032c6:	e7da      	b.n	800327e <_free_r+0x22>
 80032c8:	d902      	bls.n	80032d0 <_free_r+0x74>
 80032ca:	230c      	movs	r3, #12
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	e7d6      	b.n	800327e <_free_r+0x22>
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	1821      	adds	r1, r4, r0
 80032d4:	428b      	cmp	r3, r1
 80032d6:	bf04      	itt	eq
 80032d8:	6819      	ldreq	r1, [r3, #0]
 80032da:	685b      	ldreq	r3, [r3, #4]
 80032dc:	6063      	str	r3, [r4, #4]
 80032de:	bf04      	itt	eq
 80032e0:	1809      	addeq	r1, r1, r0
 80032e2:	6021      	streq	r1, [r4, #0]
 80032e4:	6054      	str	r4, [r2, #4]
 80032e6:	e7ca      	b.n	800327e <_free_r+0x22>
 80032e8:	bd38      	pop	{r3, r4, r5, pc}
 80032ea:	bf00      	nop
 80032ec:	20000240 	.word	0x20000240

080032f0 <sbrk_aligned>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003330 <sbrk_aligned+0x40>)
 80032f4:	460c      	mov	r4, r1
 80032f6:	6831      	ldr	r1, [r6, #0]
 80032f8:	4605      	mov	r5, r0
 80032fa:	b911      	cbnz	r1, 8003302 <sbrk_aligned+0x12>
 80032fc:	f000 f9d6 	bl	80036ac <_sbrk_r>
 8003300:	6030      	str	r0, [r6, #0]
 8003302:	4621      	mov	r1, r4
 8003304:	4628      	mov	r0, r5
 8003306:	f000 f9d1 	bl	80036ac <_sbrk_r>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	d103      	bne.n	8003316 <sbrk_aligned+0x26>
 800330e:	f04f 34ff 	mov.w	r4, #4294967295
 8003312:	4620      	mov	r0, r4
 8003314:	bd70      	pop	{r4, r5, r6, pc}
 8003316:	1cc4      	adds	r4, r0, #3
 8003318:	f024 0403 	bic.w	r4, r4, #3
 800331c:	42a0      	cmp	r0, r4
 800331e:	d0f8      	beq.n	8003312 <sbrk_aligned+0x22>
 8003320:	1a21      	subs	r1, r4, r0
 8003322:	4628      	mov	r0, r5
 8003324:	f000 f9c2 	bl	80036ac <_sbrk_r>
 8003328:	3001      	adds	r0, #1
 800332a:	d1f2      	bne.n	8003312 <sbrk_aligned+0x22>
 800332c:	e7ef      	b.n	800330e <sbrk_aligned+0x1e>
 800332e:	bf00      	nop
 8003330:	2000023c 	.word	0x2000023c

08003334 <_malloc_r>:
 8003334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003338:	1ccd      	adds	r5, r1, #3
 800333a:	f025 0503 	bic.w	r5, r5, #3
 800333e:	3508      	adds	r5, #8
 8003340:	2d0c      	cmp	r5, #12
 8003342:	bf38      	it	cc
 8003344:	250c      	movcc	r5, #12
 8003346:	2d00      	cmp	r5, #0
 8003348:	4606      	mov	r6, r0
 800334a:	db01      	blt.n	8003350 <_malloc_r+0x1c>
 800334c:	42a9      	cmp	r1, r5
 800334e:	d904      	bls.n	800335a <_malloc_r+0x26>
 8003350:	230c      	movs	r3, #12
 8003352:	6033      	str	r3, [r6, #0]
 8003354:	2000      	movs	r0, #0
 8003356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800335a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003430 <_malloc_r+0xfc>
 800335e:	f000 f869 	bl	8003434 <__malloc_lock>
 8003362:	f8d8 3000 	ldr.w	r3, [r8]
 8003366:	461c      	mov	r4, r3
 8003368:	bb44      	cbnz	r4, 80033bc <_malloc_r+0x88>
 800336a:	4629      	mov	r1, r5
 800336c:	4630      	mov	r0, r6
 800336e:	f7ff ffbf 	bl	80032f0 <sbrk_aligned>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	4604      	mov	r4, r0
 8003376:	d158      	bne.n	800342a <_malloc_r+0xf6>
 8003378:	f8d8 4000 	ldr.w	r4, [r8]
 800337c:	4627      	mov	r7, r4
 800337e:	2f00      	cmp	r7, #0
 8003380:	d143      	bne.n	800340a <_malloc_r+0xd6>
 8003382:	2c00      	cmp	r4, #0
 8003384:	d04b      	beq.n	800341e <_malloc_r+0xea>
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	eb04 0903 	add.w	r9, r4, r3
 8003390:	f000 f98c 	bl	80036ac <_sbrk_r>
 8003394:	4581      	cmp	r9, r0
 8003396:	d142      	bne.n	800341e <_malloc_r+0xea>
 8003398:	6821      	ldr	r1, [r4, #0]
 800339a:	1a6d      	subs	r5, r5, r1
 800339c:	4629      	mov	r1, r5
 800339e:	4630      	mov	r0, r6
 80033a0:	f7ff ffa6 	bl	80032f0 <sbrk_aligned>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d03a      	beq.n	800341e <_malloc_r+0xea>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	442b      	add	r3, r5
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	f8d8 3000 	ldr.w	r3, [r8]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	bb62      	cbnz	r2, 8003410 <_malloc_r+0xdc>
 80033b6:	f8c8 7000 	str.w	r7, [r8]
 80033ba:	e00f      	b.n	80033dc <_malloc_r+0xa8>
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	1b52      	subs	r2, r2, r5
 80033c0:	d420      	bmi.n	8003404 <_malloc_r+0xd0>
 80033c2:	2a0b      	cmp	r2, #11
 80033c4:	d917      	bls.n	80033f6 <_malloc_r+0xc2>
 80033c6:	1961      	adds	r1, r4, r5
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	6025      	str	r5, [r4, #0]
 80033cc:	bf18      	it	ne
 80033ce:	6059      	strne	r1, [r3, #4]
 80033d0:	6863      	ldr	r3, [r4, #4]
 80033d2:	bf08      	it	eq
 80033d4:	f8c8 1000 	streq.w	r1, [r8]
 80033d8:	5162      	str	r2, [r4, r5]
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	4630      	mov	r0, r6
 80033de:	f000 f82f 	bl	8003440 <__malloc_unlock>
 80033e2:	f104 000b 	add.w	r0, r4, #11
 80033e6:	1d23      	adds	r3, r4, #4
 80033e8:	f020 0007 	bic.w	r0, r0, #7
 80033ec:	1ac2      	subs	r2, r0, r3
 80033ee:	bf1c      	itt	ne
 80033f0:	1a1b      	subne	r3, r3, r0
 80033f2:	50a3      	strne	r3, [r4, r2]
 80033f4:	e7af      	b.n	8003356 <_malloc_r+0x22>
 80033f6:	6862      	ldr	r2, [r4, #4]
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	bf0c      	ite	eq
 80033fc:	f8c8 2000 	streq.w	r2, [r8]
 8003400:	605a      	strne	r2, [r3, #4]
 8003402:	e7eb      	b.n	80033dc <_malloc_r+0xa8>
 8003404:	4623      	mov	r3, r4
 8003406:	6864      	ldr	r4, [r4, #4]
 8003408:	e7ae      	b.n	8003368 <_malloc_r+0x34>
 800340a:	463c      	mov	r4, r7
 800340c:	687f      	ldr	r7, [r7, #4]
 800340e:	e7b6      	b.n	800337e <_malloc_r+0x4a>
 8003410:	461a      	mov	r2, r3
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	42a3      	cmp	r3, r4
 8003416:	d1fb      	bne.n	8003410 <_malloc_r+0xdc>
 8003418:	2300      	movs	r3, #0
 800341a:	6053      	str	r3, [r2, #4]
 800341c:	e7de      	b.n	80033dc <_malloc_r+0xa8>
 800341e:	230c      	movs	r3, #12
 8003420:	6033      	str	r3, [r6, #0]
 8003422:	4630      	mov	r0, r6
 8003424:	f000 f80c 	bl	8003440 <__malloc_unlock>
 8003428:	e794      	b.n	8003354 <_malloc_r+0x20>
 800342a:	6005      	str	r5, [r0, #0]
 800342c:	e7d6      	b.n	80033dc <_malloc_r+0xa8>
 800342e:	bf00      	nop
 8003430:	20000240 	.word	0x20000240

08003434 <__malloc_lock>:
 8003434:	4801      	ldr	r0, [pc, #4]	@ (800343c <__malloc_lock+0x8>)
 8003436:	f7ff bf0e 	b.w	8003256 <__retarget_lock_acquire_recursive>
 800343a:	bf00      	nop
 800343c:	20000238 	.word	0x20000238

08003440 <__malloc_unlock>:
 8003440:	4801      	ldr	r0, [pc, #4]	@ (8003448 <__malloc_unlock+0x8>)
 8003442:	f7ff bf09 	b.w	8003258 <__retarget_lock_release_recursive>
 8003446:	bf00      	nop
 8003448:	20000238 	.word	0x20000238

0800344c <__sflush_r>:
 800344c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003454:	0716      	lsls	r6, r2, #28
 8003456:	4605      	mov	r5, r0
 8003458:	460c      	mov	r4, r1
 800345a:	d454      	bmi.n	8003506 <__sflush_r+0xba>
 800345c:	684b      	ldr	r3, [r1, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	dc02      	bgt.n	8003468 <__sflush_r+0x1c>
 8003462:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	dd48      	ble.n	80034fa <__sflush_r+0xae>
 8003468:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800346a:	2e00      	cmp	r6, #0
 800346c:	d045      	beq.n	80034fa <__sflush_r+0xae>
 800346e:	2300      	movs	r3, #0
 8003470:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003474:	682f      	ldr	r7, [r5, #0]
 8003476:	6a21      	ldr	r1, [r4, #32]
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	d030      	beq.n	80034de <__sflush_r+0x92>
 800347c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800347e:	89a3      	ldrh	r3, [r4, #12]
 8003480:	0759      	lsls	r1, r3, #29
 8003482:	d505      	bpl.n	8003490 <__sflush_r+0x44>
 8003484:	6863      	ldr	r3, [r4, #4]
 8003486:	1ad2      	subs	r2, r2, r3
 8003488:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800348a:	b10b      	cbz	r3, 8003490 <__sflush_r+0x44>
 800348c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800348e:	1ad2      	subs	r2, r2, r3
 8003490:	2300      	movs	r3, #0
 8003492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003494:	6a21      	ldr	r1, [r4, #32]
 8003496:	4628      	mov	r0, r5
 8003498:	47b0      	blx	r6
 800349a:	1c43      	adds	r3, r0, #1
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	d106      	bne.n	80034ae <__sflush_r+0x62>
 80034a0:	6829      	ldr	r1, [r5, #0]
 80034a2:	291d      	cmp	r1, #29
 80034a4:	d82b      	bhi.n	80034fe <__sflush_r+0xb2>
 80034a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003550 <__sflush_r+0x104>)
 80034a8:	410a      	asrs	r2, r1
 80034aa:	07d6      	lsls	r6, r2, #31
 80034ac:	d427      	bmi.n	80034fe <__sflush_r+0xb2>
 80034ae:	2200      	movs	r2, #0
 80034b0:	6062      	str	r2, [r4, #4]
 80034b2:	04d9      	lsls	r1, r3, #19
 80034b4:	6922      	ldr	r2, [r4, #16]
 80034b6:	6022      	str	r2, [r4, #0]
 80034b8:	d504      	bpl.n	80034c4 <__sflush_r+0x78>
 80034ba:	1c42      	adds	r2, r0, #1
 80034bc:	d101      	bne.n	80034c2 <__sflush_r+0x76>
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	b903      	cbnz	r3, 80034c4 <__sflush_r+0x78>
 80034c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80034c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034c6:	602f      	str	r7, [r5, #0]
 80034c8:	b1b9      	cbz	r1, 80034fa <__sflush_r+0xae>
 80034ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034ce:	4299      	cmp	r1, r3
 80034d0:	d002      	beq.n	80034d8 <__sflush_r+0x8c>
 80034d2:	4628      	mov	r0, r5
 80034d4:	f7ff fec2 	bl	800325c <_free_r>
 80034d8:	2300      	movs	r3, #0
 80034da:	6363      	str	r3, [r4, #52]	@ 0x34
 80034dc:	e00d      	b.n	80034fa <__sflush_r+0xae>
 80034de:	2301      	movs	r3, #1
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b0      	blx	r6
 80034e4:	4602      	mov	r2, r0
 80034e6:	1c50      	adds	r0, r2, #1
 80034e8:	d1c9      	bne.n	800347e <__sflush_r+0x32>
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0c6      	beq.n	800347e <__sflush_r+0x32>
 80034f0:	2b1d      	cmp	r3, #29
 80034f2:	d001      	beq.n	80034f8 <__sflush_r+0xac>
 80034f4:	2b16      	cmp	r3, #22
 80034f6:	d11e      	bne.n	8003536 <__sflush_r+0xea>
 80034f8:	602f      	str	r7, [r5, #0]
 80034fa:	2000      	movs	r0, #0
 80034fc:	e022      	b.n	8003544 <__sflush_r+0xf8>
 80034fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003502:	b21b      	sxth	r3, r3
 8003504:	e01b      	b.n	800353e <__sflush_r+0xf2>
 8003506:	690f      	ldr	r7, [r1, #16]
 8003508:	2f00      	cmp	r7, #0
 800350a:	d0f6      	beq.n	80034fa <__sflush_r+0xae>
 800350c:	0793      	lsls	r3, r2, #30
 800350e:	680e      	ldr	r6, [r1, #0]
 8003510:	bf08      	it	eq
 8003512:	694b      	ldreq	r3, [r1, #20]
 8003514:	600f      	str	r7, [r1, #0]
 8003516:	bf18      	it	ne
 8003518:	2300      	movne	r3, #0
 800351a:	eba6 0807 	sub.w	r8, r6, r7
 800351e:	608b      	str	r3, [r1, #8]
 8003520:	f1b8 0f00 	cmp.w	r8, #0
 8003524:	dde9      	ble.n	80034fa <__sflush_r+0xae>
 8003526:	6a21      	ldr	r1, [r4, #32]
 8003528:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800352a:	4643      	mov	r3, r8
 800352c:	463a      	mov	r2, r7
 800352e:	4628      	mov	r0, r5
 8003530:	47b0      	blx	r6
 8003532:	2800      	cmp	r0, #0
 8003534:	dc08      	bgt.n	8003548 <__sflush_r+0xfc>
 8003536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800353a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800353e:	81a3      	strh	r3, [r4, #12]
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003548:	4407      	add	r7, r0
 800354a:	eba8 0800 	sub.w	r8, r8, r0
 800354e:	e7e7      	b.n	8003520 <__sflush_r+0xd4>
 8003550:	dfbffffe 	.word	0xdfbffffe

08003554 <_fflush_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	690b      	ldr	r3, [r1, #16]
 8003558:	4605      	mov	r5, r0
 800355a:	460c      	mov	r4, r1
 800355c:	b913      	cbnz	r3, 8003564 <_fflush_r+0x10>
 800355e:	2500      	movs	r5, #0
 8003560:	4628      	mov	r0, r5
 8003562:	bd38      	pop	{r3, r4, r5, pc}
 8003564:	b118      	cbz	r0, 800356e <_fflush_r+0x1a>
 8003566:	6a03      	ldr	r3, [r0, #32]
 8003568:	b90b      	cbnz	r3, 800356e <_fflush_r+0x1a>
 800356a:	f7ff fc8f 	bl	8002e8c <__sinit>
 800356e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f3      	beq.n	800355e <_fflush_r+0xa>
 8003576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003578:	07d0      	lsls	r0, r2, #31
 800357a:	d404      	bmi.n	8003586 <_fflush_r+0x32>
 800357c:	0599      	lsls	r1, r3, #22
 800357e:	d402      	bmi.n	8003586 <_fflush_r+0x32>
 8003580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003582:	f7ff fe68 	bl	8003256 <__retarget_lock_acquire_recursive>
 8003586:	4628      	mov	r0, r5
 8003588:	4621      	mov	r1, r4
 800358a:	f7ff ff5f 	bl	800344c <__sflush_r>
 800358e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003590:	07da      	lsls	r2, r3, #31
 8003592:	4605      	mov	r5, r0
 8003594:	d4e4      	bmi.n	8003560 <_fflush_r+0xc>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	059b      	lsls	r3, r3, #22
 800359a:	d4e1      	bmi.n	8003560 <_fflush_r+0xc>
 800359c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800359e:	f7ff fe5b 	bl	8003258 <__retarget_lock_release_recursive>
 80035a2:	e7dd      	b.n	8003560 <_fflush_r+0xc>

080035a4 <__swhatbuf_r>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	460c      	mov	r4, r1
 80035a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ac:	2900      	cmp	r1, #0
 80035ae:	b096      	sub	sp, #88	@ 0x58
 80035b0:	4615      	mov	r5, r2
 80035b2:	461e      	mov	r6, r3
 80035b4:	da0d      	bge.n	80035d2 <__swhatbuf_r+0x2e>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	bf14      	ite	ne
 80035c2:	2340      	movne	r3, #64	@ 0x40
 80035c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035c8:	2000      	movs	r0, #0
 80035ca:	6031      	str	r1, [r6, #0]
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	b016      	add	sp, #88	@ 0x58
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
 80035d2:	466a      	mov	r2, sp
 80035d4:	f000 f848 	bl	8003668 <_fstat_r>
 80035d8:	2800      	cmp	r0, #0
 80035da:	dbec      	blt.n	80035b6 <__swhatbuf_r+0x12>
 80035dc:	9901      	ldr	r1, [sp, #4]
 80035de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035e6:	4259      	negs	r1, r3
 80035e8:	4159      	adcs	r1, r3
 80035ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035ee:	e7eb      	b.n	80035c8 <__swhatbuf_r+0x24>

080035f0 <__smakebuf_r>:
 80035f0:	898b      	ldrh	r3, [r1, #12]
 80035f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035f4:	079d      	lsls	r5, r3, #30
 80035f6:	4606      	mov	r6, r0
 80035f8:	460c      	mov	r4, r1
 80035fa:	d507      	bpl.n	800360c <__smakebuf_r+0x1c>
 80035fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	6123      	str	r3, [r4, #16]
 8003604:	2301      	movs	r3, #1
 8003606:	6163      	str	r3, [r4, #20]
 8003608:	b003      	add	sp, #12
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360c:	ab01      	add	r3, sp, #4
 800360e:	466a      	mov	r2, sp
 8003610:	f7ff ffc8 	bl	80035a4 <__swhatbuf_r>
 8003614:	9f00      	ldr	r7, [sp, #0]
 8003616:	4605      	mov	r5, r0
 8003618:	4639      	mov	r1, r7
 800361a:	4630      	mov	r0, r6
 800361c:	f7ff fe8a 	bl	8003334 <_malloc_r>
 8003620:	b948      	cbnz	r0, 8003636 <__smakebuf_r+0x46>
 8003622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003626:	059a      	lsls	r2, r3, #22
 8003628:	d4ee      	bmi.n	8003608 <__smakebuf_r+0x18>
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	e7e2      	b.n	80035fc <__smakebuf_r+0xc>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	6020      	str	r0, [r4, #0]
 800363a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363e:	81a3      	strh	r3, [r4, #12]
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003646:	b15b      	cbz	r3, 8003660 <__smakebuf_r+0x70>
 8003648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f81d 	bl	800368c <_isatty_r>
 8003652:	b128      	cbz	r0, 8003660 <__smakebuf_r+0x70>
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	81a3      	strh	r3, [r4, #12]
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	431d      	orrs	r5, r3
 8003664:	81a5      	strh	r5, [r4, #12]
 8003666:	e7cf      	b.n	8003608 <__smakebuf_r+0x18>

08003668 <_fstat_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4d07      	ldr	r5, [pc, #28]	@ (8003688 <_fstat_r+0x20>)
 800366c:	2300      	movs	r3, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	602b      	str	r3, [r5, #0]
 8003676:	f7fe f8b9 	bl	80017ec <_fstat>
 800367a:	1c43      	adds	r3, r0, #1
 800367c:	d102      	bne.n	8003684 <_fstat_r+0x1c>
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	b103      	cbz	r3, 8003684 <_fstat_r+0x1c>
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	20000234 	.word	0x20000234

0800368c <_isatty_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4d06      	ldr	r5, [pc, #24]	@ (80036a8 <_isatty_r+0x1c>)
 8003690:	2300      	movs	r3, #0
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7fe f8b8 	bl	800180c <_isatty>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_isatty_r+0x1a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_isatty_r+0x1a>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000234 	.word	0x20000234

080036ac <_sbrk_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4d06      	ldr	r5, [pc, #24]	@ (80036c8 <_sbrk_r+0x1c>)
 80036b0:	2300      	movs	r3, #0
 80036b2:	4604      	mov	r4, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	f7fe f8c0 	bl	800183c <_sbrk>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d102      	bne.n	80036c6 <_sbrk_r+0x1a>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	b103      	cbz	r3, 80036c6 <_sbrk_r+0x1a>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	20000234 	.word	0x20000234

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	bf00      	nop
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
